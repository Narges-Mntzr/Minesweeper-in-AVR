
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000262  00800060  000010c0  00001154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008a  008002c2  008002c2  000013b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001429  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000717  00000000  00000000  000028cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000df8  00000000  00000000  00002fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00003ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000430  00000000  00000000  00003f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000091a  00000000  00000000  0000434c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004c66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
       4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
       8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
       c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      54:	4e 02       	muls	r20, r30
      56:	59 02       	muls	r21, r25
      58:	73 02       	muls	r23, r19
      5a:	8d 02       	muls	r24, r29
      5c:	a7 02       	muls	r26, r23
      5e:	c1 02       	muls	r28, r17
      60:	28 03       	fmul	r18, r16
      62:	28 03       	fmul	r18, r16
      64:	28 03       	fmul	r18, r16
      66:	28 03       	fmul	r18, r16
      68:	db 02       	muls	r29, r27
      6a:	f5 02       	muls	r31, r21
      6c:	0f 03       	fmul	r16, r23

0000006e <__ctors_end>:
      6e:	11 24       	eor	r1, r1
      70:	1f be       	out	0x3f, r1	; 63
      72:	cf e5       	ldi	r28, 0x5F	; 95
      74:	d8 e0       	ldi	r29, 0x08	; 8
      76:	de bf       	out	0x3e, r29	; 62
      78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
      7a:	12 e0       	ldi	r17, 0x02	; 2
      7c:	a0 e6       	ldi	r26, 0x60	; 96
      7e:	b0 e0       	ldi	r27, 0x00	; 0
      80:	e0 ec       	ldi	r30, 0xC0	; 192
      82:	f0 e1       	ldi	r31, 0x10	; 16
      84:	02 c0       	rjmp	.+4      	; 0x8a <__do_copy_data+0x10>
      86:	05 90       	lpm	r0, Z+
      88:	0d 92       	st	X+, r0
      8a:	a2 3c       	cpi	r26, 0xC2	; 194
      8c:	b1 07       	cpc	r27, r17
      8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0xc>

00000090 <__do_clear_bss>:
      90:	23 e0       	ldi	r18, 0x03	; 3
      92:	a2 ec       	ldi	r26, 0xC2	; 194
      94:	b2 e0       	ldi	r27, 0x02	; 2
      96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
      98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
      9a:	ac 34       	cpi	r26, 0x4C	; 76
      9c:	b2 07       	cpc	r27, r18
      9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>
      a0:	0e 94 24 08 	call	0x1048	; 0x1048 <main>
      a4:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <_exit>

000000a8 <__bad_interrupt>:
      a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <glcd_cmd>:

// Functions
void glcd_cmd(unsigned char cmd) // subroutine for command
{
	// C --> Data lines
	PORTC = cmd;
      ac:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ae:	8f e9       	ldi	r24, 0x9F	; 159
      b0:	9f e0       	ldi	r25, 0x0F	; 15
      b2:	01 97       	sbiw	r24, 0x01	; 1
      b4:	f1 f7       	brne	.-4      	; 0xb2 <glcd_cmd+0x6>
      b6:	00 c0       	rjmp	.+0      	; 0xb8 <glcd_cmd+0xc>
      b8:	00 00       	nop
	_delay_ms(2);
	PORTD &= ~(1 << 2); // Set D/I = 0 --> Instruction
      ba:	82 b3       	in	r24, 0x12	; 18
      bc:	8b 7f       	andi	r24, 0xFB	; 251
      be:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << 1); // Set R/W = 0 --> Write
      c0:	82 b3       	in	r24, 0x12	; 18
      c2:	8d 7f       	andi	r24, 0xFD	; 253
      c4:	82 bb       	out	0x12, r24	; 18

	// D0 --> E
	PORTD |= (1 << 0); // Send pulse
      c6:	82 b3       	in	r24, 0x12	; 18
      c8:	81 60       	ori	r24, 0x01	; 1
      ca:	82 bb       	out	0x12, r24	; 18
      cc:	8f e9       	ldi	r24, 0x9F	; 159
      ce:	9f e0       	ldi	r25, 0x0F	; 15
      d0:	01 97       	sbiw	r24, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <glcd_cmd+0x24>
      d4:	00 c0       	rjmp	.+0      	; 0xd6 <glcd_cmd+0x2a>
      d6:	00 00       	nop
	_delay_ms(2);
	PORTD &= ~(1 << 0);
      d8:	82 b3       	in	r24, 0x12	; 18
      da:	8e 7f       	andi	r24, 0xFE	; 254
      dc:	82 bb       	out	0x12, r24	; 18
      de:	08 95       	ret

000000e0 <glcd_data>:
}

void glcd_data(unsigned char dat) // subroutine for data
{
	PORTC = dat;
      e0:	85 bb       	out	0x15, r24	; 21
      e2:	8f e9       	ldi	r24, 0x9F	; 159
      e4:	9f e0       	ldi	r25, 0x0F	; 15
      e6:	01 97       	sbiw	r24, 0x01	; 1
      e8:	f1 f7       	brne	.-4      	; 0xe6 <glcd_data+0x6>
      ea:	00 c0       	rjmp	.+0      	; 0xec <glcd_data+0xc>
      ec:	00 00       	nop
	_delay_ms(2);
	PORTD |= (1 << 2);	// Set D/I = 1 --> Data
      ee:	82 b3       	in	r24, 0x12	; 18
      f0:	84 60       	ori	r24, 0x04	; 4
      f2:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << 1); // Set R/W = 0 --> Write
      f4:	82 b3       	in	r24, 0x12	; 18
      f6:	8d 7f       	andi	r24, 0xFD	; 253
      f8:	82 bb       	out	0x12, r24	; 18

	PORTD |= (1 << 0); // Send pulse
      fa:	82 b3       	in	r24, 0x12	; 18
      fc:	81 60       	ori	r24, 0x01	; 1
      fe:	82 bb       	out	0x12, r24	; 18
     100:	8f e9       	ldi	r24, 0x9F	; 159
     102:	9f e0       	ldi	r25, 0x0F	; 15
     104:	01 97       	sbiw	r24, 0x01	; 1
     106:	f1 f7       	brne	.-4      	; 0x104 <glcd_data+0x24>
     108:	00 c0       	rjmp	.+0      	; 0x10a <glcd_data+0x2a>
     10a:	00 00       	nop
	_delay_ms(2);
	PORTD &= ~(1 << 0);
     10c:	82 b3       	in	r24, 0x12	; 18
     10e:	8e 7f       	andi	r24, 0xFE	; 254
     110:	82 bb       	out	0x12, r24	; 18
     112:	08 95       	ret

00000114 <select_chip>:
}

void select_chip(int chip) // Chip selection
{						   // CS1 --> PD4
	// CS2 --> PD3
	if (chip == 2)
     114:	02 97       	sbiw	r24, 0x02	; 2
     116:	39 f4       	brne	.+14     	; 0x126 <select_chip+0x12>
	{
		PORTD |= (1 << 4);
     118:	82 b3       	in	r24, 0x12	; 18
     11a:	80 61       	ori	r24, 0x10	; 16
     11c:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~(1 << 3);
     11e:	82 b3       	in	r24, 0x12	; 18
     120:	87 7f       	andi	r24, 0xF7	; 247
     122:	82 bb       	out	0x12, r24	; 18
     124:	08 95       	ret
	}
	else
	{
		PORTD &= ~(1 << 4);
     126:	82 b3       	in	r24, 0x12	; 18
     128:	8f 7e       	andi	r24, 0xEF	; 239
     12a:	82 bb       	out	0x12, r24	; 18
		PORTD |= (1 << 3);
     12c:	82 b3       	in	r24, 0x12	; 18
     12e:	88 60       	ori	r24, 0x08	; 8
     130:	82 bb       	out	0x12, r24	; 18
     132:	08 95       	ret

00000134 <glcd_set>:
	}
}

void glcd_set() // subroutine for initialaization
{
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	00 d0       	rcall	.+0      	; 0x13a <glcd_set+0x6>
     13a:	1f 92       	push	r1
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
	// 0xb8 --> Set page 0, 0x40 --> Set counter 0, 0x3f --> Display on
	unsigned char command[3] = {0xb8, 0x40, 0x3f};
     140:	88 eb       	ldi	r24, 0xB8	; 184
     142:	89 83       	std	Y+1, r24	; 0x01
     144:	80 e4       	ldi	r24, 0x40	; 64
     146:	8a 83       	std	Y+2, r24	; 0x02
     148:	8f e3       	ldi	r24, 0x3F	; 63
     14a:	8b 83       	std	Y+3, r24	; 0x03
	select_chip(2); // Chip selection
     14c:	82 e0       	ldi	r24, 0x02	; 2
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	0e 94 8a 00 	call	0x114	; 0x114 <select_chip>
	for (i = 0; i < 3; i++)
     154:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     158:	0e c0       	rjmp	.+28     	; 0x176 <glcd_set+0x42>
		glcd_cmd(command[i]);
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	ec 0f       	add	r30, r28
     160:	fd 1f       	adc	r31, r29
     162:	e8 0f       	add	r30, r24
     164:	f1 1d       	adc	r31, r1
     166:	80 81       	ld	r24, Z
     168:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
void glcd_set() // subroutine for initialaization
{
	// 0xb8 --> Set page 0, 0x40 --> Set counter 0, 0x3f --> Display on
	unsigned char command[3] = {0xb8, 0x40, 0x3f};
	select_chip(2); // Chip selection
	for (i = 0; i < 3; i++)
     16c:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     170:	8f 5f       	subi	r24, 0xFF	; 255
     172:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     176:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     17a:	83 30       	cpi	r24, 0x03	; 3
     17c:	70 f3       	brcs	.-36     	; 0x15a <glcd_set+0x26>
		glcd_cmd(command[i]);
	select_chip(1);
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 8a 00 	call	0x114	; 0x114 <select_chip>
	for (i = 0; i < 3; i++)
     186:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     18a:	0e c0       	rjmp	.+28     	; 0x1a8 <glcd_set+0x74>
		glcd_cmd(command[i]);
     18c:	e1 e0       	ldi	r30, 0x01	; 1
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	ec 0f       	add	r30, r28
     192:	fd 1f       	adc	r31, r29
     194:	e8 0f       	add	r30, r24
     196:	f1 1d       	adc	r31, r1
     198:	80 81       	ld	r24, Z
     19a:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
	unsigned char command[3] = {0xb8, 0x40, 0x3f};
	select_chip(2); // Chip selection
	for (i = 0; i < 3; i++)
		glcd_cmd(command[i]);
	select_chip(1);
	for (i = 0; i < 3; i++)
     19e:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     1a2:	8f 5f       	subi	r24, 0xFF	; 255
     1a4:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     1a8:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     1ac:	83 30       	cpi	r24, 0x03	; 3
     1ae:	70 f3       	brcs	.-36     	; 0x18c <glcd_set+0x58>
		glcd_cmd(command[i]);
}
     1b0:	0f 90       	pop	r0
     1b2:	0f 90       	pop	r0
     1b4:	0f 90       	pop	r0
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	08 95       	ret

000001bc <glcd_init>:

void glcd_init()
{
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	8f e9       	ldi	r24, 0x9F	; 159
     1c2:	9f e0       	ldi	r25, 0x0F	; 15
     1c4:	01 97       	sbiw	r24, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <glcd_init+0x8>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <glcd_init+0xe>
     1ca:	00 00       	nop
	// RST --> D5
	_delay_ms(2);
	PORTD &= ~(1 << 5);
     1cc:	82 b3       	in	r24, 0x12	; 18
     1ce:	8f 7d       	andi	r24, 0xDF	; 223
     1d0:	82 bb       	out	0x12, r24	; 18
     1d2:	8f e1       	ldi	r24, 0x1F	; 31
     1d4:	9e e4       	ldi	r25, 0x4E	; 78
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <glcd_init+0x1a>
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <glcd_init+0x20>
     1dc:	00 00       	nop
	_delay_ms(10);
	PORTD |= (1 << 5);
     1de:	82 b3       	in	r24, 0x12	; 18
     1e0:	80 62       	ori	r24, 0x20	; 32
     1e2:	82 bb       	out	0x12, r24	; 18
     1e4:	8f e9       	ldi	r24, 0x9F	; 159
     1e6:	9f e0       	ldi	r25, 0x0F	; 15
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <glcd_init+0x2c>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <glcd_init+0x32>
     1ee:	00 00       	nop
	_delay_ms(2);

	glcd_set(); // initialization
     1f0:	0e 94 9a 00 	call	0x134	; 0x134 <glcd_set>
     1f4:	8f ec       	ldi	r24, 0xCF	; 207
     1f6:	97 e0       	ldi	r25, 0x07	; 7
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <glcd_init+0x3c>
     1fc:	00 c0       	rjmp	.+0      	; 0x1fe <glcd_init+0x42>
     1fe:	00 00       	nop
	_delay_ms(1);

	select_chip(2);
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 8a 00 	call	0x114	; 0x114 <select_chip>

	// Set page 0
	glcd_cmd(0xb8);
     208:	88 eb       	ldi	r24, 0xB8	; 184
     20a:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
	glcd_cmd(0x40);
     20e:	80 e4       	ldi	r24, 0x40	; 64
     210:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
	for (i = 0; i < 64; i++)
     214:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     218:	08 c0       	rjmp	.+16     	; 0x22a <glcd_init+0x6e>
	{
		glcd_data(0);
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
	select_chip(2);

	// Set page 0
	glcd_cmd(0xb8);
	glcd_cmd(0x40);
	for (i = 0; i < 64; i++)
     220:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     224:	8f 5f       	subi	r24, 0xFF	; 255
     226:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     22a:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     22e:	80 34       	cpi	r24, 0x40	; 64
     230:	a0 f3       	brcs	.-24     	; 0x21a <glcd_init+0x5e>
	{
		glcd_data(0);
	}

	// Set page 1 and Display MINE
	glcd_cmd(0xb8 | 1);
     232:	89 eb       	ldi	r24, 0xB9	; 185
     234:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
	glcd_cmd(0x40);
     238:	80 e4       	ldi	r24, 0x40	; 64
     23a:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
	for (i = 0; i < 18; i++)
     23e:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     242:	08 c0       	rjmp	.+16     	; 0x254 <glcd_init+0x98>
	{
		glcd_data(0);
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
	}

	// Set page 1 and Display MINE
	glcd_cmd(0xb8 | 1);
	glcd_cmd(0x40);
	for (i = 0; i < 18; i++)
     24a:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     24e:	8f 5f       	subi	r24, 0xFF	; 255
     250:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     254:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     258:	82 31       	cpi	r24, 0x12	; 18
     25a:	a0 f3       	brcs	.-24     	; 0x244 <glcd_init+0x88>
	{
		glcd_data(0);
	}
	for (i = 0; i < 27; i++)
     25c:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     260:	0b c0       	rjmp	.+22     	; 0x278 <glcd_init+0xbc>
	{
		glcd_data(mine[i]);
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	e9 59       	subi	r30, 0x99	; 153
     266:	fd 4f       	sbci	r31, 0xFD	; 253
     268:	80 81       	ld	r24, Z
     26a:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
	glcd_cmd(0x40);
	for (i = 0; i < 18; i++)
	{
		glcd_data(0);
	}
	for (i = 0; i < 27; i++)
     26e:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     272:	8f 5f       	subi	r24, 0xFF	; 255
     274:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     278:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <i>
     27c:	eb 31       	cpi	r30, 0x1B	; 27
     27e:	88 f3       	brcs	.-30     	; 0x262 <glcd_init+0xa6>
	{
		glcd_data(mine[i]);
	}
	for (i = 0; i < 19; i++)
     280:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     284:	08 c0       	rjmp	.+16     	; 0x296 <glcd_init+0xda>
	{
		glcd_data(0);
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
	}
	for (i = 0; i < 27; i++)
	{
		glcd_data(mine[i]);
	}
	for (i = 0; i < 19; i++)
     28c:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     290:	8f 5f       	subi	r24, 0xFF	; 255
     292:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     296:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     29a:	83 31       	cpi	r24, 0x13	; 19
     29c:	a0 f3       	brcs	.-24     	; 0x286 <glcd_init+0xca>
	{
		glcd_data(0);
	}

	// Set page 2 and Display SWEEPER
	glcd_cmd(0xb8 | 2);
     29e:	8a eb       	ldi	r24, 0xBA	; 186
     2a0:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
	glcd_cmd(0x40);
     2a4:	80 e4       	ldi	r24, 0x40	; 64
     2a6:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
	for (i = 0; i < 8; i++)
     2aa:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     2ae:	08 c0       	rjmp	.+16     	; 0x2c0 <glcd_init+0x104>
	{
		glcd_data(0);
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
	}

	// Set page 2 and Display SWEEPER
	glcd_cmd(0xb8 | 2);
	glcd_cmd(0x40);
	for (i = 0; i < 8; i++)
     2b6:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     2ba:	8f 5f       	subi	r24, 0xFF	; 255
     2bc:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     2c0:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     2c4:	88 30       	cpi	r24, 0x08	; 8
     2c6:	a0 f3       	brcs	.-24     	; 0x2b0 <glcd_init+0xf4>
	{
		glcd_data(0);
	}
	for (i = 0; i < 48; i++)
     2c8:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     2cc:	0b c0       	rjmp	.+22     	; 0x2e4 <glcd_init+0x128>
	{
		glcd_data(sweeper[i]);
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	e9 5c       	subi	r30, 0xC9	; 201
     2d2:	fd 4f       	sbci	r31, 0xFD	; 253
     2d4:	80 81       	ld	r24, Z
     2d6:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
	glcd_cmd(0x40);
	for (i = 0; i < 8; i++)
	{
		glcd_data(0);
	}
	for (i = 0; i < 48; i++)
     2da:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     2de:	8f 5f       	subi	r24, 0xFF	; 255
     2e0:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     2e4:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <i>
     2e8:	e0 33       	cpi	r30, 0x30	; 48
     2ea:	88 f3       	brcs	.-30     	; 0x2ce <glcd_init+0x112>
	{
		glcd_data(sweeper[i]);
	}
	for (i = 0; i < 8; i++)
     2ec:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     2f0:	08 c0       	rjmp	.+16     	; 0x302 <glcd_init+0x146>
	{
		glcd_data(0);
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
	}
	for (i = 0; i < 48; i++)
	{
		glcd_data(sweeper[i]);
	}
	for (i = 0; i < 8; i++)
     2f8:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     2fc:	8f 5f       	subi	r24, 0xFF	; 255
     2fe:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     302:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     306:	88 30       	cpi	r24, 0x08	; 8
     308:	a0 f3       	brcs	.-24     	; 0x2f2 <glcd_init+0x136>
     30a:	c3 e0       	ldi	r28, 0x03	; 3
     30c:	d0 e0       	ldi	r29, 0x00	; 0
     30e:	17 c0       	rjmp	.+46     	; 0x33e <glcd_init+0x182>
	}

	// Set page 3,4
	for (int pageNum = 3; pageNum < 5; pageNum++)
	{
		glcd_cmd(0xb8 | pageNum);
     310:	8c 2f       	mov	r24, r28
     312:	88 6b       	ori	r24, 0xB8	; 184
     314:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
		glcd_cmd(0x40);
     318:	80 e4       	ldi	r24, 0x40	; 64
     31a:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
		for (i = 0; i < 64; i++)
     31e:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     322:	08 c0       	rjmp	.+16     	; 0x334 <glcd_init+0x178>
		{
			glcd_data(0);
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
	// Set page 3,4
	for (int pageNum = 3; pageNum < 5; pageNum++)
	{
		glcd_cmd(0xb8 | pageNum);
		glcd_cmd(0x40);
		for (i = 0; i < 64; i++)
     32a:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     32e:	8f 5f       	subi	r24, 0xFF	; 255
     330:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     334:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     338:	80 34       	cpi	r24, 0x40	; 64
     33a:	a0 f3       	brcs	.-24     	; 0x324 <glcd_init+0x168>
	{
		glcd_data(0);
	}

	// Set page 3,4
	for (int pageNum = 3; pageNum < 5; pageNum++)
     33c:	21 96       	adiw	r28, 0x01	; 1
     33e:	c5 30       	cpi	r28, 0x05	; 5
     340:	d1 05       	cpc	r29, r1
     342:	34 f3       	brlt	.-52     	; 0x310 <glcd_init+0x154>
			glcd_data(0);
		}
	}

	// Set page 5 and Display WELCOME:)
	glcd_cmd(0xb8 | 5);
     344:	8d eb       	ldi	r24, 0xBD	; 189
     346:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
	glcd_cmd(0x40);
     34a:	80 e4       	ldi	r24, 0x40	; 64
     34c:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
	for (i = 0; i < 8; i++)
     350:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     354:	08 c0       	rjmp	.+16     	; 0x366 <glcd_init+0x1aa>
	{
		glcd_data(0);
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
	}

	// Set page 5 and Display WELCOME:)
	glcd_cmd(0xb8 | 5);
	glcd_cmd(0x40);
	for (i = 0; i < 8; i++)
     35c:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     360:	8f 5f       	subi	r24, 0xFF	; 255
     362:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     366:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     36a:	88 30       	cpi	r24, 0x08	; 8
     36c:	a0 f3       	brcs	.-24     	; 0x356 <glcd_init+0x19a>
	{
		glcd_data(0);
	}
	for (i = 0; i < 48; i++)
     36e:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     372:	0b c0       	rjmp	.+22     	; 0x38a <glcd_init+0x1ce>
	{
		glcd_data(welcome[i]);
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	e9 5f       	subi	r30, 0xF9	; 249
     378:	fd 4f       	sbci	r31, 0xFD	; 253
     37a:	80 81       	ld	r24, Z
     37c:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
	glcd_cmd(0x40);
	for (i = 0; i < 8; i++)
	{
		glcd_data(0);
	}
	for (i = 0; i < 48; i++)
     380:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     384:	8f 5f       	subi	r24, 0xFF	; 255
     386:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     38a:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <i>
     38e:	e0 33       	cpi	r30, 0x30	; 48
     390:	88 f3       	brcs	.-30     	; 0x374 <glcd_init+0x1b8>
	{
		glcd_data(welcome[i]);
	}
	for (i = 0; i < 8; i++)
     392:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     396:	08 c0       	rjmp	.+16     	; 0x3a8 <glcd_init+0x1ec>
	{
		glcd_data(0);
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
	}
	for (i = 0; i < 48; i++)
	{
		glcd_data(welcome[i]);
	}
	for (i = 0; i < 8; i++)
     39e:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     3a2:	8f 5f       	subi	r24, 0xFF	; 255
     3a4:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     3a8:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     3ac:	88 30       	cpi	r24, 0x08	; 8
     3ae:	a0 f3       	brcs	.-24     	; 0x398 <glcd_init+0x1dc>
     3b0:	c6 e0       	ldi	r28, 0x06	; 6
     3b2:	d0 e0       	ldi	r29, 0x00	; 0
     3b4:	17 c0       	rjmp	.+46     	; 0x3e4 <glcd_init+0x228>
		glcd_data(0);
	}

	for (int pageNum = 6; pageNum < 8; pageNum++)
	{
		glcd_cmd(0xb8 | pageNum);
     3b6:	8c 2f       	mov	r24, r28
     3b8:	88 6b       	ori	r24, 0xB8	; 184
     3ba:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
		glcd_cmd(0x40);
     3be:	80 e4       	ldi	r24, 0x40	; 64
     3c0:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
		for (i = 0; i < 64; i++)
     3c4:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     3c8:	08 c0       	rjmp	.+16     	; 0x3da <glcd_init+0x21e>
		{
			glcd_data(0);
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>

	for (int pageNum = 6; pageNum < 8; pageNum++)
	{
		glcd_cmd(0xb8 | pageNum);
		glcd_cmd(0x40);
		for (i = 0; i < 64; i++)
     3d0:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     3d4:	8f 5f       	subi	r24, 0xFF	; 255
     3d6:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     3da:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     3de:	80 34       	cpi	r24, 0x40	; 64
     3e0:	a0 f3       	brcs	.-24     	; 0x3ca <glcd_init+0x20e>
	for (i = 0; i < 8; i++)
	{
		glcd_data(0);
	}

	for (int pageNum = 6; pageNum < 8; pageNum++)
     3e2:	21 96       	adiw	r28, 0x01	; 1
     3e4:	c8 30       	cpi	r28, 0x08	; 8
     3e6:	d1 05       	cpc	r29, r1
     3e8:	34 f3       	brlt	.-52     	; 0x3b6 <glcd_init+0x1fa>
		for (i = 0; i < 64; i++)
		{
			glcd_data(0);
		}
	}
}
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <set_block>:

void set_block(unsigned char x, unsigned char y, unsigned char shape, unsigned char is_cursor)
{
     3f0:	ef 92       	push	r14
     3f2:	ff 92       	push	r15
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	28 97       	sbiw	r28, 0x08	; 8
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	e8 2e       	mov	r14, r24
     40e:	14 2f       	mov	r17, r20
     410:	f2 2e       	mov	r15, r18
	y = y * 8;
     412:	06 2f       	mov	r16, r22
     414:	00 0f       	add	r16, r16
     416:	00 0f       	add	r16, r16
     418:	00 0f       	add	r16, r16
	select_chip(1);
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0e 94 8a 00 	call	0x114	; 0x114 <select_chip>
	glcd_cmd(0xb8 | x);
     422:	8e 2d       	mov	r24, r14
     424:	88 6b       	ori	r24, 0xB8	; 184
     426:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
	glcd_cmd(0x40 | y);
     42a:	80 2f       	mov	r24, r16
     42c:	80 64       	ori	r24, 0x40	; 64
     42e:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
	unsigned char out[8];
	if (!is_cursor)
     432:	f1 10       	cpse	r15, r1
     434:	12 c0       	rjmp	.+36     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
	{
		for (i = 0; i < 8; i++)
     436:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		{
			out[i] = 0;
     43c:	e1 e0       	ldi	r30, 0x01	; 1
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	ec 0f       	add	r30, r28
     442:	fd 1f       	adc	r31, r29
     444:	e8 0f       	add	r30, r24
     446:	f1 1d       	adc	r31, r1
     448:	10 82       	st	Z, r1
	glcd_cmd(0xb8 | x);
	glcd_cmd(0x40 | y);
	unsigned char out[8];
	if (!is_cursor)
	{
		for (i = 0; i < 8; i++)
     44a:	8f 5f       	subi	r24, 0xFF	; 255
     44c:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     450:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     454:	88 30       	cpi	r24, 0x08	; 8
     456:	90 f3       	brcs	.-28     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     458:	16 c0       	rjmp	.+44     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
			out[i] = 0;
		}
	}
	else
	{
		out[0] = 255;
     45a:	8f ef       	ldi	r24, 0xFF	; 255
     45c:	89 83       	std	Y+1, r24	; 0x01
		out[7] = 255;
     45e:	88 87       	std	Y+8, r24	; 0x08
		for (i = 1; i < 7; i++)
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     466:	0b c0       	rjmp	.+22     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
		{
			out[i] = 129;
     468:	e1 e0       	ldi	r30, 0x01	; 1
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	ec 0f       	add	r30, r28
     46e:	fd 1f       	adc	r31, r29
     470:	e8 0f       	add	r30, r24
     472:	f1 1d       	adc	r31, r1
     474:	91 e8       	ldi	r25, 0x81	; 129
     476:	90 83       	st	Z, r25
	}
	else
	{
		out[0] = 255;
		out[7] = 255;
		for (i = 1; i < 7; i++)
     478:	8f 5f       	subi	r24, 0xFF	; 255
     47a:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     47e:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     482:	87 30       	cpi	r24, 0x07	; 7
     484:	88 f3       	brcs	.-30     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
		{
			out[i] = 129;
		}
	}

	switch (shape)
     486:	41 2f       	mov	r20, r17
     488:	50 e0       	ldi	r21, 0x00	; 0
     48a:	4d 30       	cpi	r20, 0x0D	; 13
     48c:	51 05       	cpc	r21, r1
     48e:	08 f0       	brcs	.+2      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     490:	df c0       	rjmp	.+446    	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
     492:	fa 01       	movw	r30, r20
     494:	e6 5d       	subi	r30, 0xD6	; 214
     496:	ff 4f       	sbci	r31, 0xFF	; 255
     498:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__tablejump2__>
	{
	case 0:
		for (i = 0; i < 8; i++)
     49c:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4a2:	8f 5f       	subi	r24, 0xFF	; 255
     4a4:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     4a8:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     4ac:	88 30       	cpi	r24, 0x08	; 8
     4ae:	c8 f3       	brcs	.-14     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     4b0:	cf c0       	rjmp	.+414    	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
		{
			out[i] |= 0;
		}
		break;
	case 1:
		for (i = 0; i < 8; i++)
     4b2:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     4b6:	12 c0       	rjmp	.+36     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
		{
			out[i] |= one[i];
     4b8:	e8 2f       	mov	r30, r24
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	df 01       	movw	r26, r30
     4be:	a6 55       	subi	r26, 0x56	; 86
     4c0:	bd 4f       	sbci	r27, 0xFD	; 253
     4c2:	9c 91       	ld	r25, X
     4c4:	21 e0       	ldi	r18, 0x01	; 1
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	2c 0f       	add	r18, r28
     4ca:	3d 1f       	adc	r19, r29
     4cc:	e2 0f       	add	r30, r18
     4ce:	f3 1f       	adc	r31, r19
     4d0:	20 81       	ld	r18, Z
     4d2:	92 2b       	or	r25, r18
     4d4:	90 83       	st	Z, r25
		{
			out[i] |= 0;
		}
		break;
	case 1:
		for (i = 0; i < 8; i++)
     4d6:	8f 5f       	subi	r24, 0xFF	; 255
     4d8:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     4dc:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     4e0:	88 30       	cpi	r24, 0x08	; 8
     4e2:	50 f3       	brcs	.-44     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     4e4:	b5 c0       	rjmp	.+362    	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
		{
			out[i] |= one[i];
		}
		break;
	case 2:
		for (i = 0; i < 8; i++)
     4e6:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     4ea:	12 c0       	rjmp	.+36     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
		{
			out[i] |= two[i];
     4ec:	e8 2f       	mov	r30, r24
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	df 01       	movw	r26, r30
     4f2:	ae 55       	subi	r26, 0x5E	; 94
     4f4:	bd 4f       	sbci	r27, 0xFD	; 253
     4f6:	9c 91       	ld	r25, X
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	2c 0f       	add	r18, r28
     4fe:	3d 1f       	adc	r19, r29
     500:	e2 0f       	add	r30, r18
     502:	f3 1f       	adc	r31, r19
     504:	20 81       	ld	r18, Z
     506:	92 2b       	or	r25, r18
     508:	90 83       	st	Z, r25
		{
			out[i] |= one[i];
		}
		break;
	case 2:
		for (i = 0; i < 8; i++)
     50a:	8f 5f       	subi	r24, 0xFF	; 255
     50c:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     510:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     514:	88 30       	cpi	r24, 0x08	; 8
     516:	50 f3       	brcs	.-44     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
     518:	9b c0       	rjmp	.+310    	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
		{
			out[i] |= two[i];
		}
		break;
	case 3:
		for (i = 0; i < 8; i++)
     51a:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     51e:	12 c0       	rjmp	.+36     	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
		{
			out[i] |= three[i];
     520:	e8 2f       	mov	r30, r24
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	df 01       	movw	r26, r30
     526:	a6 56       	subi	r26, 0x66	; 102
     528:	bd 4f       	sbci	r27, 0xFD	; 253
     52a:	9c 91       	ld	r25, X
     52c:	21 e0       	ldi	r18, 0x01	; 1
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	2c 0f       	add	r18, r28
     532:	3d 1f       	adc	r19, r29
     534:	e2 0f       	add	r30, r18
     536:	f3 1f       	adc	r31, r19
     538:	20 81       	ld	r18, Z
     53a:	92 2b       	or	r25, r18
     53c:	90 83       	st	Z, r25
		{
			out[i] |= two[i];
		}
		break;
	case 3:
		for (i = 0; i < 8; i++)
     53e:	8f 5f       	subi	r24, 0xFF	; 255
     540:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     544:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     548:	88 30       	cpi	r24, 0x08	; 8
     54a:	50 f3       	brcs	.-44     	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
     54c:	81 c0       	rjmp	.+258    	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
		{
			out[i] |= three[i];
		}
		break;
	case 4:
		for (i = 0; i < 8; i++)
     54e:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     552:	12 c0       	rjmp	.+36     	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
		{
			out[i] |= four[i];
     554:	e8 2f       	mov	r30, r24
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	df 01       	movw	r26, r30
     55a:	ae 56       	subi	r26, 0x6E	; 110
     55c:	bd 4f       	sbci	r27, 0xFD	; 253
     55e:	9c 91       	ld	r25, X
     560:	21 e0       	ldi	r18, 0x01	; 1
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	2c 0f       	add	r18, r28
     566:	3d 1f       	adc	r19, r29
     568:	e2 0f       	add	r30, r18
     56a:	f3 1f       	adc	r31, r19
     56c:	20 81       	ld	r18, Z
     56e:	92 2b       	or	r25, r18
     570:	90 83       	st	Z, r25
		{
			out[i] |= three[i];
		}
		break;
	case 4:
		for (i = 0; i < 8; i++)
     572:	8f 5f       	subi	r24, 0xFF	; 255
     574:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     578:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     57c:	88 30       	cpi	r24, 0x08	; 8
     57e:	50 f3       	brcs	.-44     	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
     580:	67 c0       	rjmp	.+206    	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
		{
			out[i] |= four[i];
		}
		break;
	case 5:
		for (i = 0; i < 8; i++)
     582:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     586:	12 c0       	rjmp	.+36     	; 0x5ac <__EEPROM_REGION_LENGTH__+0x1ac>
		{
			out[i] |= five[i];
     588:	e8 2f       	mov	r30, r24
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	df 01       	movw	r26, r30
     58e:	a6 57       	subi	r26, 0x76	; 118
     590:	bd 4f       	sbci	r27, 0xFD	; 253
     592:	9c 91       	ld	r25, X
     594:	21 e0       	ldi	r18, 0x01	; 1
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	2c 0f       	add	r18, r28
     59a:	3d 1f       	adc	r19, r29
     59c:	e2 0f       	add	r30, r18
     59e:	f3 1f       	adc	r31, r19
     5a0:	20 81       	ld	r18, Z
     5a2:	92 2b       	or	r25, r18
     5a4:	90 83       	st	Z, r25
		{
			out[i] |= four[i];
		}
		break;
	case 5:
		for (i = 0; i < 8; i++)
     5a6:	8f 5f       	subi	r24, 0xFF	; 255
     5a8:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     5ac:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     5b0:	88 30       	cpi	r24, 0x08	; 8
     5b2:	50 f3       	brcs	.-44     	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
     5b4:	4d c0       	rjmp	.+154    	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
		{
			out[i] |= five[i];
		}
		break;
	case 10:
		for (i = 0; i < 8; i++)
     5b6:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     5ba:	12 c0       	rjmp	.+36     	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
		{
			out[i] |= bomb[i];
     5bc:	e8 2f       	mov	r30, r24
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	df 01       	movw	r26, r30
     5c2:	a6 54       	subi	r26, 0x46	; 70
     5c4:	bd 4f       	sbci	r27, 0xFD	; 253
     5c6:	9c 91       	ld	r25, X
     5c8:	21 e0       	ldi	r18, 0x01	; 1
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	2c 0f       	add	r18, r28
     5ce:	3d 1f       	adc	r19, r29
     5d0:	e2 0f       	add	r30, r18
     5d2:	f3 1f       	adc	r31, r19
     5d4:	20 81       	ld	r18, Z
     5d6:	92 2b       	or	r25, r18
     5d8:	90 83       	st	Z, r25
		{
			out[i] |= five[i];
		}
		break;
	case 10:
		for (i = 0; i < 8; i++)
     5da:	8f 5f       	subi	r24, 0xFF	; 255
     5dc:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     5e0:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     5e4:	88 30       	cpi	r24, 0x08	; 8
     5e6:	50 f3       	brcs	.-44     	; 0x5bc <__EEPROM_REGION_LENGTH__+0x1bc>
     5e8:	33 c0       	rjmp	.+102    	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
		{
			out[i] |= bomb[i];
		}
		break;
	case 11:
		for (i = 0; i < 8; i++)
     5ea:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     5ee:	12 c0       	rjmp	.+36     	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
		{
			out[i] |= flag[i];
     5f0:	e8 2f       	mov	r30, r24
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	df 01       	movw	r26, r30
     5f6:	ae 54       	subi	r26, 0x4E	; 78
     5f8:	bd 4f       	sbci	r27, 0xFD	; 253
     5fa:	9c 91       	ld	r25, X
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	2c 0f       	add	r18, r28
     602:	3d 1f       	adc	r19, r29
     604:	e2 0f       	add	r30, r18
     606:	f3 1f       	adc	r31, r19
     608:	20 81       	ld	r18, Z
     60a:	92 2b       	or	r25, r18
     60c:	90 83       	st	Z, r25
		{
			out[i] |= bomb[i];
		}
		break;
	case 11:
		for (i = 0; i < 8; i++)
     60e:	8f 5f       	subi	r24, 0xFF	; 255
     610:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     614:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     618:	88 30       	cpi	r24, 0x08	; 8
     61a:	50 f3       	brcs	.-44     	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
     61c:	19 c0       	rjmp	.+50     	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
		{
			out[i] |= flag[i];
		}
		break;
	case 12:
		for (i = 0; i < 8; i++)
     61e:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     622:	12 c0       	rjmp	.+36     	; 0x648 <__EEPROM_REGION_LENGTH__+0x248>
		{
			out[i] |= block[i];
     624:	e8 2f       	mov	r30, r24
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	df 01       	movw	r26, r30
     62a:	ae 57       	subi	r26, 0x7E	; 126
     62c:	bd 4f       	sbci	r27, 0xFD	; 253
     62e:	9c 91       	ld	r25, X
     630:	21 e0       	ldi	r18, 0x01	; 1
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	2c 0f       	add	r18, r28
     636:	3d 1f       	adc	r19, r29
     638:	e2 0f       	add	r30, r18
     63a:	f3 1f       	adc	r31, r19
     63c:	20 81       	ld	r18, Z
     63e:	92 2b       	or	r25, r18
     640:	90 83       	st	Z, r25
		{
			out[i] |= flag[i];
		}
		break;
	case 12:
		for (i = 0; i < 8; i++)
     642:	8f 5f       	subi	r24, 0xFF	; 255
     644:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     648:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     64c:	88 30       	cpi	r24, 0x08	; 8
     64e:	50 f3       	brcs	.-44     	; 0x624 <__EEPROM_REGION_LENGTH__+0x224>
		{
			out[i] |= block[i];
		}
		break;
	}
	for (i = 0; i < 8; i++)
     650:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     654:	0e c0       	rjmp	.+28     	; 0x672 <__EEPROM_REGION_LENGTH__+0x272>
	{
		glcd_data(out[i]);
     656:	e1 e0       	ldi	r30, 0x01	; 1
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	e8 0f       	add	r30, r24
     660:	f1 1d       	adc	r31, r1
     662:	80 81       	ld	r24, Z
     664:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
		{
			out[i] |= block[i];
		}
		break;
	}
	for (i = 0; i < 8; i++)
     668:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     66c:	8f 5f       	subi	r24, 0xFF	; 255
     66e:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     672:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     676:	88 30       	cpi	r24, 0x08	; 8
     678:	70 f3       	brcs	.-36     	; 0x656 <__EEPROM_REGION_LENGTH__+0x256>
	{
		glcd_data(out[i]);
	}
}
     67a:	28 96       	adiw	r28, 0x08	; 8
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	de bf       	out	0x3e, r29	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	cd bf       	out	0x3d, r28	; 61
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	1f 91       	pop	r17
     68c:	0f 91       	pop	r16
     68e:	ff 90       	pop	r15
     690:	ef 90       	pop	r14
     692:	08 95       	ret

00000694 <glcd_game_restart>:

void glcd_game_restart()
{
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
	// Make page5  clean!
	glcd_cmd(0xb8 | 5);
     698:	8d eb       	ldi	r24, 0xBD	; 189
     69a:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
	glcd_cmd(0x40);
     69e:	80 e4       	ldi	r24, 0x40	; 64
     6a0:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
	for (i = 0; i < 64; i++)
     6a4:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     6a8:	08 c0       	rjmp	.+16     	; 0x6ba <glcd_game_restart+0x26>
	{
		glcd_data(0);
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
void glcd_game_restart()
{
	// Make page5  clean!
	glcd_cmd(0xb8 | 5);
	glcd_cmd(0x40);
	for (i = 0; i < 64; i++)
     6b0:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     6b4:	8f 5f       	subi	r24, 0xFF	; 255
     6b6:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     6ba:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     6be:	80 34       	cpi	r24, 0x40	; 64
     6c0:	a0 f3       	brcs	.-24     	; 0x6aa <glcd_game_restart+0x16>
	{
		glcd_data(0);
	}

	l_x = 0;
     6c2:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <l_x>
	l_y = 0;
     6c6:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <l_y>
	l_shape = 12;
     6ca:	8c e0       	ldi	r24, 0x0C	; 12
     6cc:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <l_shape>
	select_chip(2);
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 8a 00 	call	0x114	; 0x114 <select_chip>

	for (unsigned char w = 0; w < 8; w++)
     6d8:	d0 e0       	ldi	r29, 0x00	; 0
     6da:	0c c0       	rjmp	.+24     	; 0x6f4 <glcd_game_restart+0x60>
	{
		for (unsigned char z = 0; z < 8; z++)
		{
			set_block(w, z, 12, 0);
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	4c e0       	ldi	r20, 0x0C	; 12
     6e0:	6c 2f       	mov	r22, r28
     6e2:	8d 2f       	mov	r24, r29
     6e4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <set_block>
	l_shape = 12;
	select_chip(2);

	for (unsigned char w = 0; w < 8; w++)
	{
		for (unsigned char z = 0; z < 8; z++)
     6e8:	cf 5f       	subi	r28, 0xFF	; 255
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <glcd_game_restart+0x5a>
     6ec:	c0 e0       	ldi	r28, 0x00	; 0
     6ee:	c8 30       	cpi	r28, 0x08	; 8
     6f0:	a8 f3       	brcs	.-22     	; 0x6dc <glcd_game_restart+0x48>
	l_x = 0;
	l_y = 0;
	l_shape = 12;
	select_chip(2);

	for (unsigned char w = 0; w < 8; w++)
     6f2:	df 5f       	subi	r29, 0xFF	; 255
     6f4:	d8 30       	cpi	r29, 0x08	; 8
     6f6:	d0 f3       	brcs	.-12     	; 0x6ec <glcd_game_restart+0x58>
		for (unsigned char z = 0; z < 8; z++)
		{
			set_block(w, z, 12, 0);
		}
	}
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	08 95       	ret

000006fe <glcd_game_over>:

void glcd_game_over()
{
	select_chip(2);
     6fe:	82 e0       	ldi	r24, 0x02	; 2
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 8a 00 	call	0x114	; 0x114 <select_chip>
	glcd_cmd(0xb8 | 5);
     706:	8d eb       	ldi	r24, 0xBD	; 189
     708:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
	glcd_cmd(0x40);
     70c:	80 e4       	ldi	r24, 0x40	; 64
     70e:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
	for (i = 0; i < 4; i++)
     712:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     716:	08 c0       	rjmp	.+16     	; 0x728 <glcd_game_over+0x2a>
	{
		glcd_data(0);
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
void glcd_game_over()
{
	select_chip(2);
	glcd_cmd(0xb8 | 5);
	glcd_cmd(0x40);
	for (i = 0; i < 4; i++)
     71e:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     722:	8f 5f       	subi	r24, 0xFF	; 255
     724:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     728:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     72c:	84 30       	cpi	r24, 0x04	; 4
     72e:	a0 f3       	brcs	.-24     	; 0x718 <glcd_game_over+0x1a>
	{
		glcd_data(0);
	}
	for (i = 0; i < 55; i++)
     730:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     734:	0b c0       	rjmp	.+22     	; 0x74c <glcd_game_over+0x4e>
	{
		glcd_data(gameover[i]);
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	e0 53       	subi	r30, 0x30	; 48
     73a:	fe 4f       	sbci	r31, 0xFE	; 254
     73c:	80 81       	ld	r24, Z
     73e:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
	glcd_cmd(0x40);
	for (i = 0; i < 4; i++)
	{
		glcd_data(0);
	}
	for (i = 0; i < 55; i++)
     742:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     746:	8f 5f       	subi	r24, 0xFF	; 255
     748:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     74c:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <i>
     750:	e7 33       	cpi	r30, 0x37	; 55
     752:	88 f3       	brcs	.-30     	; 0x736 <glcd_game_over+0x38>
	{
		glcd_data(gameover[i]);
	}
	for (i = 0; i < 5; i++)
     754:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     758:	08 c0       	rjmp	.+16     	; 0x76a <glcd_game_over+0x6c>
	{
		glcd_data(0);
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
	}
	for (i = 0; i < 55; i++)
	{
		glcd_data(gameover[i]);
	}
	for (i = 0; i < 5; i++)
     760:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     764:	8f 5f       	subi	r24, 0xFF	; 255
     766:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     76a:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     76e:	85 30       	cpi	r24, 0x05	; 5
     770:	a0 f3       	brcs	.-24     	; 0x75a <glcd_game_over+0x5c>
	{
		glcd_data(0);
	}
}
     772:	08 95       	ret

00000774 <glcd_victory>:

void glcd_victory()
{
	select_chip(2);
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 8a 00 	call	0x114	; 0x114 <select_chip>
	glcd_cmd(0xb8 | 5);
     77c:	8d eb       	ldi	r24, 0xBD	; 189
     77e:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
	glcd_cmd(0x40);
     782:	80 e4       	ldi	r24, 0x40	; 64
     784:	0e 94 56 00 	call	0xac	; 0xac <glcd_cmd>
	for (i = 0; i < 8; i++)
     788:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     78c:	08 c0       	rjmp	.+16     	; 0x79e <glcd_victory+0x2a>
	{
		glcd_data(0);
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
void glcd_victory()
{
	select_chip(2);
	glcd_cmd(0xb8 | 5);
	glcd_cmd(0x40);
	for (i = 0; i < 8; i++)
     794:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     798:	8f 5f       	subi	r24, 0xFF	; 255
     79a:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     79e:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     7a2:	88 30       	cpi	r24, 0x08	; 8
     7a4:	a0 f3       	brcs	.-24     	; 0x78e <glcd_victory+0x1a>
	{
		glcd_data(0);
	}
	for (i = 0; i < 48; i++)
     7a6:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     7aa:	0b c0       	rjmp	.+22     	; 0x7c2 <glcd_victory+0x4e>
	{
		glcd_data(victory[i]);
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	e0 56       	subi	r30, 0x60	; 96
     7b0:	fe 4f       	sbci	r31, 0xFE	; 254
     7b2:	80 81       	ld	r24, Z
     7b4:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
	glcd_cmd(0x40);
	for (i = 0; i < 8; i++)
	{
		glcd_data(0);
	}
	for (i = 0; i < 48; i++)
     7b8:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     7bc:	8f 5f       	subi	r24, 0xFF	; 255
     7be:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     7c2:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <i>
     7c6:	e0 33       	cpi	r30, 0x30	; 48
     7c8:	88 f3       	brcs	.-30     	; 0x7ac <glcd_victory+0x38>
	{
		glcd_data(victory[i]);
	}
	for (i = 0; i < 8; i++)
     7ca:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     7ce:	08 c0       	rjmp	.+16     	; 0x7e0 <glcd_victory+0x6c>
	{
		glcd_data(0);
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	0e 94 70 00 	call	0xe0	; 0xe0 <glcd_data>
	}
	for (i = 0; i < 48; i++)
	{
		glcd_data(victory[i]);
	}
	for (i = 0; i < 8; i++)
     7d6:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     7da:	8f 5f       	subi	r24, 0xFF	; 255
     7dc:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <i>
     7e0:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <i>
     7e4:	88 30       	cpi	r24, 0x08	; 8
     7e6:	a0 f3       	brcs	.-24     	; 0x7d0 <glcd_victory+0x5c>
	{
		glcd_data(0);
	}
}
     7e8:	08 95       	ret

000007ea <set_display>:

void set_display(unsigned char x, unsigned char y, unsigned char shape, unsigned char is_cursor)
{
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	18 2f       	mov	r17, r24
     7f2:	d6 2f       	mov	r29, r22
     7f4:	c4 2f       	mov	r28, r20
	if (!is_cursor)
     7f6:	21 11       	cpse	r18, r1
     7f8:	03 c0       	rjmp	.+6      	; 0x800 <__DATA_REGION_LENGTH__>
	{
		set_block(x, y, shape, is_cursor);
     7fa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <set_block>
     7fe:	15 c0       	rjmp	.+42     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
	}
	else
	{
		set_block(l_x, l_y, l_shape, 0);
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	40 91 0b 03 	lds	r20, 0x030B	; 0x80030b <l_shape>
     806:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <l_y>
     80a:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <l_x>
     80e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <set_block>
		set_block(x, y, shape, 1);
     812:	21 e0       	ldi	r18, 0x01	; 1
     814:	4c 2f       	mov	r20, r28
     816:	6d 2f       	mov	r22, r29
     818:	81 2f       	mov	r24, r17
     81a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <set_block>
		l_x = x;
     81e:	10 93 c8 02 	sts	0x02C8, r17	; 0x8002c8 <l_x>
		l_y = y;
     822:	d0 93 0a 03 	sts	0x030A, r29	; 0x80030a <l_y>
		l_shape = shape;
     826:	c0 93 0b 03 	sts	0x030B, r28	; 0x80030b <l_shape>
	}
}
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	1f 91       	pop	r17
     830:	08 95       	ret

00000832 <game_initialization>:

void game_initialization()
{
	x = 0;
     832:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <x>
	y = 0;
     836:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <y>
	count = 0;
     83a:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <count>

	for (i = 0; i < 8; i += 1)
     83e:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     842:	16 c0       	rjmp	.+44     	; 0x870 <__stack+0x11>
		for (unsigned char j = 0; j < 8; j += 1)
			status[i][j] = 12;
     844:	e2 2f       	mov	r30, r18
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	ee 0f       	add	r30, r30
     84a:	ff 1f       	adc	r31, r31
     84c:	ee 0f       	add	r30, r30
     84e:	ff 1f       	adc	r31, r31
     850:	ee 0f       	add	r30, r30
     852:	ff 1f       	adc	r31, r31
     854:	e4 5f       	subi	r30, 0xF4	; 244
     856:	fc 4f       	sbci	r31, 0xFC	; 252
     858:	e8 0f       	add	r30, r24
     85a:	f1 1d       	adc	r31, r1
     85c:	9c e0       	ldi	r25, 0x0C	; 12
     85e:	90 83       	st	Z, r25
	x = 0;
	y = 0;
	count = 0;

	for (i = 0; i < 8; i += 1)
		for (unsigned char j = 0; j < 8; j += 1)
     860:	8f 5f       	subi	r24, 0xFF	; 255
     862:	01 c0       	rjmp	.+2      	; 0x866 <__stack+0x7>
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	88 30       	cpi	r24, 0x08	; 8
     868:	68 f3       	brcs	.-38     	; 0x844 <game_initialization+0x12>
{
	x = 0;
	y = 0;
	count = 0;

	for (i = 0; i < 8; i += 1)
     86a:	2f 5f       	subi	r18, 0xFF	; 255
     86c:	20 93 09 03 	sts	0x0309, r18	; 0x800309 <i>
     870:	20 91 09 03 	lds	r18, 0x0309	; 0x800309 <i>
     874:	28 30       	cpi	r18, 0x08	; 8
     876:	b0 f3       	brcs	.-20     	; 0x864 <__stack+0x5>
		for (unsigned char j = 0; j < 8; j += 1)
			status[i][j] = 12;

	tableNum = (tableNum + 1)%5;
     878:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <__data_end>
     87c:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <__data_end+0x1>
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	65 e0       	ldi	r22, 0x05	; 5
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	0e 94 30 08 	call	0x1060	; 0x1060 <__divmodhi4>
     88a:	48 2f       	mov	r20, r24
     88c:	59 2f       	mov	r21, r25
     88e:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <__data_end>
     892:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <__data_end+0x1>
	for (i = 0; i < 8; i += 1)
     896:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <i>
     89a:	2c c0       	rjmp	.+88     	; 0x8f4 <__stack+0x95>
		for (unsigned char j = 0; j < 8; j += 1)
			game[i][j] = tables[tableNum][i][j];
     89c:	8a 2f       	mov	r24, r26
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	26 2f       	mov	r18, r22
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	fa 01       	movw	r30, r20
     8a6:	ee 0f       	add	r30, r30
     8a8:	ff 1f       	adc	r31, r31
     8aa:	ee 0f       	add	r30, r30
     8ac:	ff 1f       	adc	r31, r31
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	e8 0f       	add	r30, r24
     8b4:	f9 1f       	adc	r31, r25
     8b6:	ee 0f       	add	r30, r30
     8b8:	ff 1f       	adc	r31, r31
     8ba:	ee 0f       	add	r30, r30
     8bc:	ff 1f       	adc	r31, r31
     8be:	ee 0f       	add	r30, r30
     8c0:	ff 1f       	adc	r31, r31
     8c2:	e0 5a       	subi	r30, 0xA0	; 160
     8c4:	ff 4f       	sbci	r31, 0xFF	; 255
     8c6:	e2 0f       	add	r30, r18
     8c8:	f3 1f       	adc	r31, r19
     8ca:	70 81       	ld	r23, Z
     8cc:	88 0f       	add	r24, r24
     8ce:	99 1f       	adc	r25, r25
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	88 0f       	add	r24, r24
     8d6:	99 1f       	adc	r25, r25
     8d8:	87 53       	subi	r24, 0x37	; 55
     8da:	9d 4f       	sbci	r25, 0xFD	; 253
     8dc:	fc 01       	movw	r30, r24
     8de:	e2 0f       	add	r30, r18
     8e0:	f3 1f       	adc	r31, r19
     8e2:	70 83       	st	Z, r23
		for (unsigned char j = 0; j < 8; j += 1)
			status[i][j] = 12;

	tableNum = (tableNum + 1)%5;
	for (i = 0; i < 8; i += 1)
		for (unsigned char j = 0; j < 8; j += 1)
     8e4:	6f 5f       	subi	r22, 0xFF	; 255
     8e6:	01 c0       	rjmp	.+2      	; 0x8ea <__stack+0x8b>
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	68 30       	cpi	r22, 0x08	; 8
     8ec:	b8 f2       	brcs	.-82     	; 0x89c <__stack+0x3d>
	for (i = 0; i < 8; i += 1)
		for (unsigned char j = 0; j < 8; j += 1)
			status[i][j] = 12;

	tableNum = (tableNum + 1)%5;
	for (i = 0; i < 8; i += 1)
     8ee:	af 5f       	subi	r26, 0xFF	; 255
     8f0:	a0 93 09 03 	sts	0x0309, r26	; 0x800309 <i>
     8f4:	a0 91 09 03 	lds	r26, 0x0309	; 0x800309 <i>
     8f8:	a8 30       	cpi	r26, 0x08	; 8
     8fa:	b0 f3       	brcs	.-20     	; 0x8e8 <__stack+0x89>
		for (unsigned char j = 0; j < 8; j += 1)
			game[i][j] = tables[tableNum][i][j];

	glcd_game_restart();
     8fc:	0e 94 4a 03 	call	0x694	; 0x694 <glcd_game_restart>
	set_display(x, y, status[x][y], 1);
     900:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <x>
     904:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <y>
     908:	e8 2f       	mov	r30, r24
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	ee 0f       	add	r30, r30
     90e:	ff 1f       	adc	r31, r31
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	ee 0f       	add	r30, r30
     916:	ff 1f       	adc	r31, r31
     918:	e4 5f       	subi	r30, 0xF4	; 244
     91a:	fc 4f       	sbci	r31, 0xFC	; 252
     91c:	e6 0f       	add	r30, r22
     91e:	f1 1d       	adc	r31, r1
     920:	21 e0       	ldi	r18, 0x01	; 1
     922:	40 81       	ld	r20, Z
     924:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_display>
     928:	08 95       	ret

0000092a <start_game>:

void start_game()
{
	while (1)
	{
		if (PINB & (1 << 3)) // left
     92a:	b3 9b       	sbis	0x16, 3	; 22
     92c:	25 c0       	rjmp	.+74     	; 0x978 <start_game+0x4e>
		{
			if (y == 0)
     92e:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <y>
     932:	81 11       	cpse	r24, r1
     934:	04 c0       	rjmp	.+8      	; 0x93e <start_game+0x14>
				y = 7;
     936:	87 e0       	ldi	r24, 0x07	; 7
     938:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <y>
     93c:	03 c0       	rjmp	.+6      	; 0x944 <start_game+0x1a>
			else
				y = y - 1;
     93e:	81 50       	subi	r24, 0x01	; 1
     940:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <y>
			set_display(x, y, status[x][y], 1);
     944:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <x>
     948:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <y>
     94c:	e8 2f       	mov	r30, r24
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	ee 0f       	add	r30, r30
     952:	ff 1f       	adc	r31, r31
     954:	ee 0f       	add	r30, r30
     956:	ff 1f       	adc	r31, r31
     958:	ee 0f       	add	r30, r30
     95a:	ff 1f       	adc	r31, r31
     95c:	e4 5f       	subi	r30, 0xF4	; 244
     95e:	fc 4f       	sbci	r31, 0xFC	; 252
     960:	e6 0f       	add	r30, r22
     962:	f1 1d       	adc	r31, r1
     964:	21 e0       	ldi	r18, 0x01	; 1
     966:	40 81       	ld	r20, Z
     968:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_display>
     96c:	8f e3       	ldi	r24, 0x3F	; 63
     96e:	9c e9       	ldi	r25, 0x9C	; 156
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	f1 f7       	brne	.-4      	; 0x970 <start_game+0x46>
     974:	00 c0       	rjmp	.+0      	; 0x976 <start_game+0x4c>
     976:	00 00       	nop
			_delay_ms(20);
		}
		if (PINB & (1 << 1)) // right
     978:	b1 9b       	sbis	0x16, 1	; 22
     97a:	29 c0       	rjmp	.+82     	; 0x9ce <start_game+0xa4>
		{
			y = (y + 1) % 8;
     97c:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <y>
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	6f 5f       	subi	r22, 0xFF	; 255
     984:	7f 4f       	sbci	r23, 0xFF	; 255
     986:	67 70       	andi	r22, 0x07	; 7
     988:	70 78       	andi	r23, 0x80	; 128
     98a:	77 23       	and	r23, r23
     98c:	34 f4       	brge	.+12     	; 0x99a <start_game+0x70>
     98e:	61 50       	subi	r22, 0x01	; 1
     990:	71 09       	sbc	r23, r1
     992:	68 6f       	ori	r22, 0xF8	; 248
     994:	7f 6f       	ori	r23, 0xFF	; 255
     996:	6f 5f       	subi	r22, 0xFF	; 255
     998:	7f 4f       	sbci	r23, 0xFF	; 255
     99a:	60 93 c6 02 	sts	0x02C6, r22	; 0x8002c6 <y>
			set_display(x, y, status[x][y], 1);
     99e:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <x>
     9a2:	e8 2f       	mov	r30, r24
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	ee 0f       	add	r30, r30
     9a8:	ff 1f       	adc	r31, r31
     9aa:	ee 0f       	add	r30, r30
     9ac:	ff 1f       	adc	r31, r31
     9ae:	ee 0f       	add	r30, r30
     9b0:	ff 1f       	adc	r31, r31
     9b2:	e4 5f       	subi	r30, 0xF4	; 244
     9b4:	fc 4f       	sbci	r31, 0xFC	; 252
     9b6:	e6 0f       	add	r30, r22
     9b8:	f1 1d       	adc	r31, r1
     9ba:	21 e0       	ldi	r18, 0x01	; 1
     9bc:	40 81       	ld	r20, Z
     9be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_display>
     9c2:	8f e3       	ldi	r24, 0x3F	; 63
     9c4:	9c e9       	ldi	r25, 0x9C	; 156
     9c6:	01 97       	sbiw	r24, 0x01	; 1
     9c8:	f1 f7       	brne	.-4      	; 0x9c6 <start_game+0x9c>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <start_game+0xa2>
     9cc:	00 00       	nop
			_delay_ms(20);
		}
		if (PINB & (1 << 2)) // down
     9ce:	b2 9b       	sbis	0x16, 2	; 22
     9d0:	26 c0       	rjmp	.+76     	; 0xa1e <start_game+0xf4>
		{
			x = (x + 1) % 8;
     9d2:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <x>
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	87 70       	andi	r24, 0x07	; 7
     9dc:	90 78       	andi	r25, 0x80	; 128
     9de:	99 23       	and	r25, r25
     9e0:	24 f4       	brge	.+8      	; 0x9ea <start_game+0xc0>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	88 6f       	ori	r24, 0xF8	; 248
     9e6:	9f 6f       	ori	r25, 0xFF	; 255
     9e8:	01 96       	adiw	r24, 0x01	; 1
     9ea:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <x>
			set_display(x, y, status[x][y], 1);
     9ee:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <y>
     9f2:	e8 2f       	mov	r30, r24
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	ee 0f       	add	r30, r30
     9f8:	ff 1f       	adc	r31, r31
     9fa:	ee 0f       	add	r30, r30
     9fc:	ff 1f       	adc	r31, r31
     9fe:	ee 0f       	add	r30, r30
     a00:	ff 1f       	adc	r31, r31
     a02:	e4 5f       	subi	r30, 0xF4	; 244
     a04:	fc 4f       	sbci	r31, 0xFC	; 252
     a06:	e6 0f       	add	r30, r22
     a08:	f1 1d       	adc	r31, r1
     a0a:	21 e0       	ldi	r18, 0x01	; 1
     a0c:	40 81       	ld	r20, Z
     a0e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_display>
     a12:	8f e3       	ldi	r24, 0x3F	; 63
     a14:	9c e9       	ldi	r25, 0x9C	; 156
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	f1 f7       	brne	.-4      	; 0xa16 <start_game+0xec>
     a1a:	00 c0       	rjmp	.+0      	; 0xa1c <start_game+0xf2>
     a1c:	00 00       	nop
			_delay_ms(20);
		}
		if (PINB & (1)) // up
     a1e:	b0 9b       	sbis	0x16, 0	; 22
     a20:	25 c0       	rjmp	.+74     	; 0xa6c <start_game+0x142>
		{
			if (x == 0)
     a22:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <x>
     a26:	81 11       	cpse	r24, r1
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <start_game+0x108>
				x = 7;
     a2a:	87 e0       	ldi	r24, 0x07	; 7
     a2c:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <x>
     a30:	03 c0       	rjmp	.+6      	; 0xa38 <start_game+0x10e>
			else
				x = x - 1;
     a32:	81 50       	subi	r24, 0x01	; 1
     a34:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <x>
			set_display(x, y, status[x][y], 1);
     a38:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <x>
     a3c:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <y>
     a40:	e8 2f       	mov	r30, r24
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	ee 0f       	add	r30, r30
     a46:	ff 1f       	adc	r31, r31
     a48:	ee 0f       	add	r30, r30
     a4a:	ff 1f       	adc	r31, r31
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	e4 5f       	subi	r30, 0xF4	; 244
     a52:	fc 4f       	sbci	r31, 0xFC	; 252
     a54:	e6 0f       	add	r30, r22
     a56:	f1 1d       	adc	r31, r1
     a58:	21 e0       	ldi	r18, 0x01	; 1
     a5a:	40 81       	ld	r20, Z
     a5c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_display>
     a60:	8f e3       	ldi	r24, 0x3F	; 63
     a62:	9c e9       	ldi	r25, 0x9C	; 156
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <start_game+0x13a>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <start_game+0x140>
     a6a:	00 00       	nop
			_delay_ms(20);
		}
		if (PINB & (1 << 4)) // select
     a6c:	b4 9b       	sbis	0x16, 4	; 22
     a6e:	8f c2       	rjmp	.+1310   	; 0xf8e <start_game+0x664>
		{
			if (status[x][y] == 12)
     a70:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <x>
     a74:	28 2f       	mov	r18, r24
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <y>
     a7c:	a6 2f       	mov	r26, r22
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	f9 01       	movw	r30, r18
     a82:	ee 0f       	add	r30, r30
     a84:	ff 1f       	adc	r31, r31
     a86:	ee 0f       	add	r30, r30
     a88:	ff 1f       	adc	r31, r31
     a8a:	ee 0f       	add	r30, r30
     a8c:	ff 1f       	adc	r31, r31
     a8e:	e4 5f       	subi	r30, 0xF4	; 244
     a90:	fc 4f       	sbci	r31, 0xFC	; 252
     a92:	ea 0f       	add	r30, r26
     a94:	fb 1f       	adc	r31, r27
     a96:	90 81       	ld	r25, Z
     a98:	9c 30       	cpi	r25, 0x0C	; 12
     a9a:	09 f0       	breq	.+2      	; 0xa9e <start_game+0x174>
     a9c:	72 c2       	rjmp	.+1252   	; 0xf82 <start_game+0x658>
			{
				status[x][y] = game[x][y];
     a9e:	22 0f       	add	r18, r18
     aa0:	33 1f       	adc	r19, r19
     aa2:	22 0f       	add	r18, r18
     aa4:	33 1f       	adc	r19, r19
     aa6:	22 0f       	add	r18, r18
     aa8:	33 1f       	adc	r19, r19
     aaa:	f9 01       	movw	r30, r18
     aac:	e7 53       	subi	r30, 0x37	; 55
     aae:	fd 4f       	sbci	r31, 0xFD	; 253
     ab0:	ea 0f       	add	r30, r26
     ab2:	fb 1f       	adc	r31, r27
     ab4:	40 81       	ld	r20, Z
     ab6:	24 5f       	subi	r18, 0xF4	; 244
     ab8:	3c 4f       	sbci	r19, 0xFC	; 252
     aba:	f9 01       	movw	r30, r18
     abc:	ea 0f       	add	r30, r26
     abe:	fb 1f       	adc	r31, r27
     ac0:	40 83       	st	Z, r20
				set_display(x, y, status[x][y], 1);
     ac2:	21 e0       	ldi	r18, 0x01	; 1
     ac4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_display>
				count++;
     ac8:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <count>
     acc:	8f 5f       	subi	r24, 0xFF	; 255
     ace:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <count>

				if (status[x][y] == 0) // empty
     ad2:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <x>
     ad6:	28 2f       	mov	r18, r24
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <y>
     ade:	a6 2f       	mov	r26, r22
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	f9 01       	movw	r30, r18
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	ee 0f       	add	r30, r30
     aea:	ff 1f       	adc	r31, r31
     aec:	ee 0f       	add	r30, r30
     aee:	ff 1f       	adc	r31, r31
     af0:	e4 5f       	subi	r30, 0xF4	; 244
     af2:	fc 4f       	sbci	r31, 0xFC	; 252
     af4:	ea 0f       	add	r30, r26
     af6:	fb 1f       	adc	r31, r27
     af8:	90 81       	ld	r25, Z
     afa:	91 11       	cpse	r25, r1
     afc:	f9 c1       	rjmp	.+1010   	; 0xef0 <start_game+0x5c6>
				{
					// Filling neighboring houses if there are no bombs
					if (x > 0 && game[x - 1][y] != 10 && status[x - 1][y] == 12) // x-1
     afe:	88 23       	and	r24, r24
     b00:	99 f1       	breq	.+102    	; 0xb68 <start_game+0x23e>
     b02:	21 50       	subi	r18, 0x01	; 1
     b04:	31 09       	sbc	r19, r1
     b06:	f9 01       	movw	r30, r18
     b08:	ee 0f       	add	r30, r30
     b0a:	ff 1f       	adc	r31, r31
     b0c:	ee 0f       	add	r30, r30
     b0e:	ff 1f       	adc	r31, r31
     b10:	ee 0f       	add	r30, r30
     b12:	ff 1f       	adc	r31, r31
     b14:	e7 53       	subi	r30, 0x37	; 55
     b16:	fd 4f       	sbci	r31, 0xFD	; 253
     b18:	ea 0f       	add	r30, r26
     b1a:	fb 1f       	adc	r31, r27
     b1c:	40 81       	ld	r20, Z
     b1e:	4a 30       	cpi	r20, 0x0A	; 10
     b20:	19 f1       	breq	.+70     	; 0xb68 <start_game+0x23e>
     b22:	f9 01       	movw	r30, r18
     b24:	ee 0f       	add	r30, r30
     b26:	ff 1f       	adc	r31, r31
     b28:	ee 0f       	add	r30, r30
     b2a:	ff 1f       	adc	r31, r31
     b2c:	ee 0f       	add	r30, r30
     b2e:	ff 1f       	adc	r31, r31
     b30:	e4 5f       	subi	r30, 0xF4	; 244
     b32:	fc 4f       	sbci	r31, 0xFC	; 252
     b34:	ea 0f       	add	r30, r26
     b36:	fb 1f       	adc	r31, r27
     b38:	90 81       	ld	r25, Z
     b3a:	9c 30       	cpi	r25, 0x0C	; 12
     b3c:	a9 f4       	brne	.+42     	; 0xb68 <start_game+0x23e>
					{
						status[x - 1][y] = game[x - 1][y];
     b3e:	22 0f       	add	r18, r18
     b40:	33 1f       	adc	r19, r19
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	22 0f       	add	r18, r18
     b48:	33 1f       	adc	r19, r19
     b4a:	f9 01       	movw	r30, r18
     b4c:	e4 5f       	subi	r30, 0xF4	; 244
     b4e:	fc 4f       	sbci	r31, 0xFC	; 252
     b50:	ea 0f       	add	r30, r26
     b52:	fb 1f       	adc	r31, r27
     b54:	40 83       	st	Z, r20
						set_display(x - 1, y, status[x - 1][y], 0);
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	81 50       	subi	r24, 0x01	; 1
     b5a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_display>
						count++;
     b5e:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <count>
     b62:	8f 5f       	subi	r24, 0xFF	; 255
     b64:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <count>
					}
					if (y > 0 && game[x][y - 1] != 10 && status[x][y - 1] == 12) // y-1
     b68:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <y>
     b6c:	99 23       	and	r25, r25
     b6e:	e1 f1       	breq	.+120    	; 0xbe8 <start_game+0x2be>
     b70:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <x>
     b74:	a8 2f       	mov	r26, r24
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	29 2f       	mov	r18, r25
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	b9 01       	movw	r22, r18
     b7e:	61 50       	subi	r22, 0x01	; 1
     b80:	71 09       	sbc	r23, r1
     b82:	fd 01       	movw	r30, r26
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	ee 0f       	add	r30, r30
     b8a:	ff 1f       	adc	r31, r31
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	e7 53       	subi	r30, 0x37	; 55
     b92:	fd 4f       	sbci	r31, 0xFD	; 253
     b94:	e6 0f       	add	r30, r22
     b96:	f7 1f       	adc	r31, r23
     b98:	40 81       	ld	r20, Z
     b9a:	4a 30       	cpi	r20, 0x0A	; 10
     b9c:	29 f1       	breq	.+74     	; 0xbe8 <start_game+0x2be>
     b9e:	fd 01       	movw	r30, r26
     ba0:	ee 0f       	add	r30, r30
     ba2:	ff 1f       	adc	r31, r31
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	ee 0f       	add	r30, r30
     baa:	ff 1f       	adc	r31, r31
     bac:	e4 5f       	subi	r30, 0xF4	; 244
     bae:	fc 4f       	sbci	r31, 0xFC	; 252
     bb0:	e6 0f       	add	r30, r22
     bb2:	f7 1f       	adc	r31, r23
     bb4:	20 81       	ld	r18, Z
     bb6:	2c 30       	cpi	r18, 0x0C	; 12
     bb8:	b9 f4       	brne	.+46     	; 0xbe8 <start_game+0x2be>
					{
						status[x][y - 1] = game[x][y - 1];
     bba:	9d 01       	movw	r18, r26
     bbc:	22 0f       	add	r18, r18
     bbe:	33 1f       	adc	r19, r19
     bc0:	22 0f       	add	r18, r18
     bc2:	33 1f       	adc	r19, r19
     bc4:	22 0f       	add	r18, r18
     bc6:	33 1f       	adc	r19, r19
     bc8:	24 5f       	subi	r18, 0xF4	; 244
     bca:	3c 4f       	sbci	r19, 0xFC	; 252
     bcc:	f9 01       	movw	r30, r18
     bce:	e6 0f       	add	r30, r22
     bd0:	f7 1f       	adc	r31, r23
     bd2:	40 83       	st	Z, r20
						set_display(x, y - 1, status[x][y - 1], 0);
     bd4:	6f ef       	ldi	r22, 0xFF	; 255
     bd6:	69 0f       	add	r22, r25
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_display>
						count++;
     bde:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <count>
     be2:	8f 5f       	subi	r24, 0xFF	; 255
     be4:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <count>
					}
					if (x < 7 && game[x + 1][y] != 10 && status[x + 1][y] == 12) // x+1
     be8:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <x>
     bec:	87 30       	cpi	r24, 0x07	; 7
     bee:	70 f5       	brcc	.+92     	; 0xc4c <start_game+0x322>
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	2f 5f       	subi	r18, 0xFF	; 255
     bf6:	3f 4f       	sbci	r19, 0xFF	; 255
     bf8:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <y>
     bfc:	a6 2f       	mov	r26, r22
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	f9 01       	movw	r30, r18
     c02:	ee 0f       	add	r30, r30
     c04:	ff 1f       	adc	r31, r31
     c06:	ee 0f       	add	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	e7 53       	subi	r30, 0x37	; 55
     c10:	fd 4f       	sbci	r31, 0xFD	; 253
     c12:	ea 0f       	add	r30, r26
     c14:	fb 1f       	adc	r31, r27
     c16:	40 81       	ld	r20, Z
     c18:	4a 30       	cpi	r20, 0x0A	; 10
     c1a:	c1 f0       	breq	.+48     	; 0xc4c <start_game+0x322>
     c1c:	f9 01       	movw	r30, r18
     c1e:	ee 0f       	add	r30, r30
     c20:	ff 1f       	adc	r31, r31
     c22:	ee 0f       	add	r30, r30
     c24:	ff 1f       	adc	r31, r31
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	e4 5f       	subi	r30, 0xF4	; 244
     c2c:	fc 4f       	sbci	r31, 0xFC	; 252
     c2e:	ea 0f       	add	r30, r26
     c30:	fb 1f       	adc	r31, r27
     c32:	90 81       	ld	r25, Z
     c34:	9c 30       	cpi	r25, 0x0C	; 12
     c36:	51 f4       	brne	.+20     	; 0xc4c <start_game+0x322>
					{
						status[x + 1][y] = game[x + 1][y];
     c38:	40 83       	st	Z, r20
						set_display(x + 1, y, status[x + 1][y], 0);
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	8f 5f       	subi	r24, 0xFF	; 255
     c3e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_display>
						count++;
     c42:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <count>
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <count>
					}
					if (y < 7 && game[x][y + 1] != 10 && status[x][y + 1] == 12) // y+1
     c4c:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <y>
     c50:	97 30       	cpi	r25, 0x07	; 7
     c52:	d0 f5       	brcc	.+116    	; 0xcc8 <start_game+0x39e>
     c54:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <x>
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	69 2f       	mov	r22, r25
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	6f 5f       	subi	r22, 0xFF	; 255
     c62:	7f 4f       	sbci	r23, 0xFF	; 255
     c64:	f9 01       	movw	r30, r18
     c66:	ee 0f       	add	r30, r30
     c68:	ff 1f       	adc	r31, r31
     c6a:	ee 0f       	add	r30, r30
     c6c:	ff 1f       	adc	r31, r31
     c6e:	ee 0f       	add	r30, r30
     c70:	ff 1f       	adc	r31, r31
     c72:	e7 53       	subi	r30, 0x37	; 55
     c74:	fd 4f       	sbci	r31, 0xFD	; 253
     c76:	e6 0f       	add	r30, r22
     c78:	f7 1f       	adc	r31, r23
     c7a:	40 81       	ld	r20, Z
     c7c:	4a 30       	cpi	r20, 0x0A	; 10
     c7e:	21 f1       	breq	.+72     	; 0xcc8 <start_game+0x39e>
     c80:	f9 01       	movw	r30, r18
     c82:	ee 0f       	add	r30, r30
     c84:	ff 1f       	adc	r31, r31
     c86:	ee 0f       	add	r30, r30
     c88:	ff 1f       	adc	r31, r31
     c8a:	ee 0f       	add	r30, r30
     c8c:	ff 1f       	adc	r31, r31
     c8e:	e4 5f       	subi	r30, 0xF4	; 244
     c90:	fc 4f       	sbci	r31, 0xFC	; 252
     c92:	e6 0f       	add	r30, r22
     c94:	f7 1f       	adc	r31, r23
     c96:	50 81       	ld	r21, Z
     c98:	5c 30       	cpi	r21, 0x0C	; 12
     c9a:	b1 f4       	brne	.+44     	; 0xcc8 <start_game+0x39e>
					{
						status[x][y + 1] = game[x][y + 1];
     c9c:	22 0f       	add	r18, r18
     c9e:	33 1f       	adc	r19, r19
     ca0:	22 0f       	add	r18, r18
     ca2:	33 1f       	adc	r19, r19
     ca4:	22 0f       	add	r18, r18
     ca6:	33 1f       	adc	r19, r19
     ca8:	24 5f       	subi	r18, 0xF4	; 244
     caa:	3c 4f       	sbci	r19, 0xFC	; 252
     cac:	f9 01       	movw	r30, r18
     cae:	e6 0f       	add	r30, r22
     cb0:	f7 1f       	adc	r31, r23
     cb2:	40 83       	st	Z, r20
						set_display(x, y + 1, status[x][y + 1], 0);
     cb4:	61 e0       	ldi	r22, 0x01	; 1
     cb6:	69 0f       	add	r22, r25
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_display>
						count++;
     cbe:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <count>
     cc2:	8f 5f       	subi	r24, 0xFF	; 255
     cc4:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <count>
					}
					if (x > 0 && y > 0 && game[x - 1][y - 1] != 10 && status[x - 1][y - 1] == 12) // x-1  y-1
     cc8:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <x>
     ccc:	88 23       	and	r24, r24
     cce:	09 f4       	brne	.+2      	; 0xcd2 <start_game+0x3a8>
     cd0:	3f c0       	rjmp	.+126    	; 0xd50 <start_game+0x426>
     cd2:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <y>
     cd6:	99 23       	and	r25, r25
     cd8:	d9 f1       	breq	.+118    	; 0xd50 <start_game+0x426>
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	21 50       	subi	r18, 0x01	; 1
     ce0:	31 09       	sbc	r19, r1
     ce2:	69 2f       	mov	r22, r25
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	61 50       	subi	r22, 0x01	; 1
     ce8:	71 09       	sbc	r23, r1
     cea:	f9 01       	movw	r30, r18
     cec:	ee 0f       	add	r30, r30
     cee:	ff 1f       	adc	r31, r31
     cf0:	ee 0f       	add	r30, r30
     cf2:	ff 1f       	adc	r31, r31
     cf4:	ee 0f       	add	r30, r30
     cf6:	ff 1f       	adc	r31, r31
     cf8:	e7 53       	subi	r30, 0x37	; 55
     cfa:	fd 4f       	sbci	r31, 0xFD	; 253
     cfc:	e6 0f       	add	r30, r22
     cfe:	f7 1f       	adc	r31, r23
     d00:	40 81       	ld	r20, Z
     d02:	4a 30       	cpi	r20, 0x0A	; 10
     d04:	29 f1       	breq	.+74     	; 0xd50 <start_game+0x426>
     d06:	f9 01       	movw	r30, r18
     d08:	ee 0f       	add	r30, r30
     d0a:	ff 1f       	adc	r31, r31
     d0c:	ee 0f       	add	r30, r30
     d0e:	ff 1f       	adc	r31, r31
     d10:	ee 0f       	add	r30, r30
     d12:	ff 1f       	adc	r31, r31
     d14:	e4 5f       	subi	r30, 0xF4	; 244
     d16:	fc 4f       	sbci	r31, 0xFC	; 252
     d18:	e6 0f       	add	r30, r22
     d1a:	f7 1f       	adc	r31, r23
     d1c:	50 81       	ld	r21, Z
     d1e:	5c 30       	cpi	r21, 0x0C	; 12
     d20:	b9 f4       	brne	.+46     	; 0xd50 <start_game+0x426>
					{
						status[x - 1][y - 1] = game[x - 1][y - 1];
     d22:	22 0f       	add	r18, r18
     d24:	33 1f       	adc	r19, r19
     d26:	22 0f       	add	r18, r18
     d28:	33 1f       	adc	r19, r19
     d2a:	22 0f       	add	r18, r18
     d2c:	33 1f       	adc	r19, r19
     d2e:	24 5f       	subi	r18, 0xF4	; 244
     d30:	3c 4f       	sbci	r19, 0xFC	; 252
     d32:	f9 01       	movw	r30, r18
     d34:	e6 0f       	add	r30, r22
     d36:	f7 1f       	adc	r31, r23
     d38:	40 83       	st	Z, r20
						set_display(x - 1, y - 1, status[x - 1][y - 1], 0);
     d3a:	6f ef       	ldi	r22, 0xFF	; 255
     d3c:	69 0f       	add	r22, r25
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	81 50       	subi	r24, 0x01	; 1
     d42:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_display>
						count++;
     d46:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <count>
     d4a:	8f 5f       	subi	r24, 0xFF	; 255
     d4c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <count>
					}
					if (x < 7 && y > 0 && game[x + 1][y - 1] != 10 && status[x + 1][y - 1] == 12) // x+1 y-1
     d50:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <x>
     d54:	87 30       	cpi	r24, 0x07	; 7
     d56:	08 f0       	brcs	.+2      	; 0xd5a <start_game+0x430>
     d58:	3f c0       	rjmp	.+126    	; 0xdd8 <start_game+0x4ae>
     d5a:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <y>
     d5e:	99 23       	and	r25, r25
     d60:	d9 f1       	breq	.+118    	; 0xdd8 <start_game+0x4ae>
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	2f 5f       	subi	r18, 0xFF	; 255
     d68:	3f 4f       	sbci	r19, 0xFF	; 255
     d6a:	69 2f       	mov	r22, r25
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 50       	subi	r22, 0x01	; 1
     d70:	71 09       	sbc	r23, r1
     d72:	f9 01       	movw	r30, r18
     d74:	ee 0f       	add	r30, r30
     d76:	ff 1f       	adc	r31, r31
     d78:	ee 0f       	add	r30, r30
     d7a:	ff 1f       	adc	r31, r31
     d7c:	ee 0f       	add	r30, r30
     d7e:	ff 1f       	adc	r31, r31
     d80:	e7 53       	subi	r30, 0x37	; 55
     d82:	fd 4f       	sbci	r31, 0xFD	; 253
     d84:	e6 0f       	add	r30, r22
     d86:	f7 1f       	adc	r31, r23
     d88:	40 81       	ld	r20, Z
     d8a:	4a 30       	cpi	r20, 0x0A	; 10
     d8c:	29 f1       	breq	.+74     	; 0xdd8 <start_game+0x4ae>
     d8e:	f9 01       	movw	r30, r18
     d90:	ee 0f       	add	r30, r30
     d92:	ff 1f       	adc	r31, r31
     d94:	ee 0f       	add	r30, r30
     d96:	ff 1f       	adc	r31, r31
     d98:	ee 0f       	add	r30, r30
     d9a:	ff 1f       	adc	r31, r31
     d9c:	e4 5f       	subi	r30, 0xF4	; 244
     d9e:	fc 4f       	sbci	r31, 0xFC	; 252
     da0:	e6 0f       	add	r30, r22
     da2:	f7 1f       	adc	r31, r23
     da4:	50 81       	ld	r21, Z
     da6:	5c 30       	cpi	r21, 0x0C	; 12
     da8:	b9 f4       	brne	.+46     	; 0xdd8 <start_game+0x4ae>
					{
						status[x + 1][y - 1] = game[x + 1][y - 1];
     daa:	22 0f       	add	r18, r18
     dac:	33 1f       	adc	r19, r19
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	24 5f       	subi	r18, 0xF4	; 244
     db8:	3c 4f       	sbci	r19, 0xFC	; 252
     dba:	f9 01       	movw	r30, r18
     dbc:	e6 0f       	add	r30, r22
     dbe:	f7 1f       	adc	r31, r23
     dc0:	40 83       	st	Z, r20
						set_display(x + 1, y - 1, status[x + 1][y - 1], 0);
     dc2:	6f ef       	ldi	r22, 0xFF	; 255
     dc4:	69 0f       	add	r22, r25
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
     dca:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_display>
						count++;
     dce:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <count>
     dd2:	8f 5f       	subi	r24, 0xFF	; 255
     dd4:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <count>
					}
					if (x > 0 && y < 7 && game[x - 1][y + 1] != 10 && status[x - 1][y + 1] == 12) // x-1  y+1
     dd8:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <x>
     ddc:	88 23       	and	r24, r24
     dde:	09 f4       	brne	.+2      	; 0xde2 <start_game+0x4b8>
     de0:	3f c0       	rjmp	.+126    	; 0xe60 <start_game+0x536>
     de2:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <y>
     de6:	97 30       	cpi	r25, 0x07	; 7
     de8:	d8 f5       	brcc	.+118    	; 0xe60 <start_game+0x536>
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	21 50       	subi	r18, 0x01	; 1
     df0:	31 09       	sbc	r19, r1
     df2:	69 2f       	mov	r22, r25
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	6f 5f       	subi	r22, 0xFF	; 255
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	f9 01       	movw	r30, r18
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	ee 0f       	add	r30, r30
     e02:	ff 1f       	adc	r31, r31
     e04:	ee 0f       	add	r30, r30
     e06:	ff 1f       	adc	r31, r31
     e08:	e7 53       	subi	r30, 0x37	; 55
     e0a:	fd 4f       	sbci	r31, 0xFD	; 253
     e0c:	e6 0f       	add	r30, r22
     e0e:	f7 1f       	adc	r31, r23
     e10:	40 81       	ld	r20, Z
     e12:	4a 30       	cpi	r20, 0x0A	; 10
     e14:	29 f1       	breq	.+74     	; 0xe60 <start_game+0x536>
     e16:	f9 01       	movw	r30, r18
     e18:	ee 0f       	add	r30, r30
     e1a:	ff 1f       	adc	r31, r31
     e1c:	ee 0f       	add	r30, r30
     e1e:	ff 1f       	adc	r31, r31
     e20:	ee 0f       	add	r30, r30
     e22:	ff 1f       	adc	r31, r31
     e24:	e4 5f       	subi	r30, 0xF4	; 244
     e26:	fc 4f       	sbci	r31, 0xFC	; 252
     e28:	e6 0f       	add	r30, r22
     e2a:	f7 1f       	adc	r31, r23
     e2c:	50 81       	ld	r21, Z
     e2e:	5c 30       	cpi	r21, 0x0C	; 12
     e30:	b9 f4       	brne	.+46     	; 0xe60 <start_game+0x536>
					{
						status[x - 1][y + 1] = game[x - 1][y + 1];
     e32:	22 0f       	add	r18, r18
     e34:	33 1f       	adc	r19, r19
     e36:	22 0f       	add	r18, r18
     e38:	33 1f       	adc	r19, r19
     e3a:	22 0f       	add	r18, r18
     e3c:	33 1f       	adc	r19, r19
     e3e:	24 5f       	subi	r18, 0xF4	; 244
     e40:	3c 4f       	sbci	r19, 0xFC	; 252
     e42:	f9 01       	movw	r30, r18
     e44:	e6 0f       	add	r30, r22
     e46:	f7 1f       	adc	r31, r23
     e48:	40 83       	st	Z, r20
						set_display(x - 1, y + 1, status[x - 1][y + 1], 0);
     e4a:	61 e0       	ldi	r22, 0x01	; 1
     e4c:	69 0f       	add	r22, r25
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	81 50       	subi	r24, 0x01	; 1
     e52:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_display>
						count++;
     e56:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <count>
     e5a:	8f 5f       	subi	r24, 0xFF	; 255
     e5c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <count>
					}
					if (x < 7 && y < 7 && game[x + 1][y + 1] != 10 && status[x + 1][y + 1] == 12) // x+1  y+1
     e60:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <x>
     e64:	87 30       	cpi	r24, 0x07	; 7
     e66:	08 f0       	brcs	.+2      	; 0xe6a <start_game+0x540>
     e68:	8c c0       	rjmp	.+280    	; 0xf82 <start_game+0x658>
     e6a:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <y>
     e6e:	97 30       	cpi	r25, 0x07	; 7
     e70:	08 f0       	brcs	.+2      	; 0xe74 <start_game+0x54a>
     e72:	87 c0       	rjmp	.+270    	; 0xf82 <start_game+0x658>
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	2f 5f       	subi	r18, 0xFF	; 255
     e7a:	3f 4f       	sbci	r19, 0xFF	; 255
     e7c:	69 2f       	mov	r22, r25
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	6f 5f       	subi	r22, 0xFF	; 255
     e82:	7f 4f       	sbci	r23, 0xFF	; 255
     e84:	f9 01       	movw	r30, r18
     e86:	ee 0f       	add	r30, r30
     e88:	ff 1f       	adc	r31, r31
     e8a:	ee 0f       	add	r30, r30
     e8c:	ff 1f       	adc	r31, r31
     e8e:	ee 0f       	add	r30, r30
     e90:	ff 1f       	adc	r31, r31
     e92:	e7 53       	subi	r30, 0x37	; 55
     e94:	fd 4f       	sbci	r31, 0xFD	; 253
     e96:	e6 0f       	add	r30, r22
     e98:	f7 1f       	adc	r31, r23
     e9a:	40 81       	ld	r20, Z
     e9c:	4a 30       	cpi	r20, 0x0A	; 10
     e9e:	09 f4       	brne	.+2      	; 0xea2 <start_game+0x578>
     ea0:	70 c0       	rjmp	.+224    	; 0xf82 <start_game+0x658>
     ea2:	f9 01       	movw	r30, r18
     ea4:	ee 0f       	add	r30, r30
     ea6:	ff 1f       	adc	r31, r31
     ea8:	ee 0f       	add	r30, r30
     eaa:	ff 1f       	adc	r31, r31
     eac:	ee 0f       	add	r30, r30
     eae:	ff 1f       	adc	r31, r31
     eb0:	e4 5f       	subi	r30, 0xF4	; 244
     eb2:	fc 4f       	sbci	r31, 0xFC	; 252
     eb4:	e6 0f       	add	r30, r22
     eb6:	f7 1f       	adc	r31, r23
     eb8:	50 81       	ld	r21, Z
     eba:	5c 30       	cpi	r21, 0x0C	; 12
     ebc:	09 f0       	breq	.+2      	; 0xec0 <start_game+0x596>
     ebe:	61 c0       	rjmp	.+194    	; 0xf82 <start_game+0x658>
					{
						status[x + 1][y + 1] = game[x + 1][y + 1];
     ec0:	22 0f       	add	r18, r18
     ec2:	33 1f       	adc	r19, r19
     ec4:	22 0f       	add	r18, r18
     ec6:	33 1f       	adc	r19, r19
     ec8:	22 0f       	add	r18, r18
     eca:	33 1f       	adc	r19, r19
     ecc:	24 5f       	subi	r18, 0xF4	; 244
     ece:	3c 4f       	sbci	r19, 0xFC	; 252
     ed0:	f9 01       	movw	r30, r18
     ed2:	e6 0f       	add	r30, r22
     ed4:	f7 1f       	adc	r31, r23
     ed6:	40 83       	st	Z, r20
						set_display(x + 1, y + 1, status[x + 1][y + 1], 0);
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	69 0f       	add	r22, r25
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	8f 5f       	subi	r24, 0xFF	; 255
     ee0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_display>
						count++;
     ee4:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <count>
     ee8:	8f 5f       	subi	r24, 0xFF	; 255
     eea:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <count>
     eee:	49 c0       	rjmp	.+146    	; 0xf82 <start_game+0x658>
					}
				}
				else if (status[x][y] == 10) // bomb
     ef0:	9a 30       	cpi	r25, 0x0A	; 10
     ef2:	09 f0       	breq	.+2      	; 0xef6 <start_game+0x5cc>
     ef4:	46 c0       	rjmp	.+140    	; 0xf82 <start_game+0x658>
     ef6:	38 c0       	rjmp	.+112    	; 0xf68 <start_game+0x63e>
				{
					for (unsigned char i = 0; i < 8; i += 1)
					{
						for (unsigned char j = 0; j < 8; j += 1)
						{
							if (game[i][j] == 10 && status[i][j] == 12)
     ef8:	8d 2f       	mov	r24, r29
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	2c 2f       	mov	r18, r28
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	fc 01       	movw	r30, r24
     f02:	ee 0f       	add	r30, r30
     f04:	ff 1f       	adc	r31, r31
     f06:	ee 0f       	add	r30, r30
     f08:	ff 1f       	adc	r31, r31
     f0a:	ee 0f       	add	r30, r30
     f0c:	ff 1f       	adc	r31, r31
     f0e:	e7 53       	subi	r30, 0x37	; 55
     f10:	fd 4f       	sbci	r31, 0xFD	; 253
     f12:	e2 0f       	add	r30, r18
     f14:	f3 1f       	adc	r31, r19
     f16:	40 81       	ld	r20, Z
     f18:	4a 30       	cpi	r20, 0x0A	; 10
     f1a:	f9 f4       	brne	.+62     	; 0xf5a <start_game+0x630>
     f1c:	fc 01       	movw	r30, r24
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	ee 0f       	add	r30, r30
     f24:	ff 1f       	adc	r31, r31
     f26:	ee 0f       	add	r30, r30
     f28:	ff 1f       	adc	r31, r31
     f2a:	e4 5f       	subi	r30, 0xF4	; 244
     f2c:	fc 4f       	sbci	r31, 0xFC	; 252
     f2e:	e2 0f       	add	r30, r18
     f30:	f3 1f       	adc	r31, r19
     f32:	50 81       	ld	r21, Z
     f34:	5c 30       	cpi	r21, 0x0C	; 12
     f36:	89 f4       	brne	.+34     	; 0xf5a <start_game+0x630>
							{
								status[i][j] = game[i][j];
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	84 5f       	subi	r24, 0xF4	; 244
     f46:	9c 4f       	sbci	r25, 0xFC	; 252
     f48:	fc 01       	movw	r30, r24
     f4a:	e2 0f       	add	r30, r18
     f4c:	f3 1f       	adc	r31, r19
     f4e:	40 83       	st	Z, r20
								set_display(i, j, status[i][j], 0);
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	6c 2f       	mov	r22, r28
     f54:	8d 2f       	mov	r24, r29
     f56:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_display>
				}
				else if (status[x][y] == 10) // bomb
				{
					for (unsigned char i = 0; i < 8; i += 1)
					{
						for (unsigned char j = 0; j < 8; j += 1)
     f5a:	cf 5f       	subi	r28, 0xFF	; 255
     f5c:	01 c0       	rjmp	.+2      	; 0xf60 <start_game+0x636>
     f5e:	c0 e0       	ldi	r28, 0x00	; 0
     f60:	c8 30       	cpi	r28, 0x08	; 8
     f62:	50 f2       	brcs	.-108    	; 0xef8 <start_game+0x5ce>
						count++;
					}
				}
				else if (status[x][y] == 10) // bomb
				{
					for (unsigned char i = 0; i < 8; i += 1)
     f64:	df 5f       	subi	r29, 0xFF	; 255
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <start_game+0x640>
     f68:	d0 e0       	ldi	r29, 0x00	; 0
     f6a:	d8 30       	cpi	r29, 0x08	; 8
     f6c:	c0 f3       	brcs	.-16     	; 0xf5e <start_game+0x634>
								status[i][j] = game[i][j];
								set_display(i, j, status[i][j], 0);
							}
						}
					}
					glcd_game_over();
     f6e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <glcd_game_over>
     f72:	8f e5       	ldi	r24, 0x5F	; 95
     f74:	9a ee       	ldi	r25, 0xEA	; 234
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <start_game+0x64c>
     f7a:	00 c0       	rjmp	.+0      	; 0xf7c <start_game+0x652>
     f7c:	00 00       	nop
					_delay_ms(30);
					game_initialization();
     f7e:	0e 94 19 04 	call	0x832	; 0x832 <game_initialization>
     f82:	8f e3       	ldi	r24, 0x3F	; 63
     f84:	9c e9       	ldi	r25, 0x9C	; 156
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	f1 f7       	brne	.-4      	; 0xf86 <start_game+0x65c>
     f8a:	00 c0       	rjmp	.+0      	; 0xf8c <start_game+0x662>
     f8c:	00 00       	nop
				}
			}
			_delay_ms(20);
		}
		if (PINB & (1 << 5)) // flag
     f8e:	b5 9b       	sbis	0x16, 5	; 22
     f90:	4b c0       	rjmp	.+150    	; 0x1028 <start_game+0x6fe>
		{
			if (status[x][y] == 12)
     f92:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <x>
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <y>
     f9e:	46 2f       	mov	r20, r22
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	f9 01       	movw	r30, r18
     fa4:	ee 0f       	add	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	ee 0f       	add	r30, r30
     faa:	ff 1f       	adc	r31, r31
     fac:	ee 0f       	add	r30, r30
     fae:	ff 1f       	adc	r31, r31
     fb0:	e4 5f       	subi	r30, 0xF4	; 244
     fb2:	fc 4f       	sbci	r31, 0xFC	; 252
     fb4:	e4 0f       	add	r30, r20
     fb6:	f5 1f       	adc	r31, r21
     fb8:	90 81       	ld	r25, Z
     fba:	9c 30       	cpi	r25, 0x0C	; 12
     fbc:	b9 f4       	brne	.+46     	; 0xfec <start_game+0x6c2>
			{
				status[x][y] = 11;
     fbe:	22 0f       	add	r18, r18
     fc0:	33 1f       	adc	r19, r19
     fc2:	22 0f       	add	r18, r18
     fc4:	33 1f       	adc	r19, r19
     fc6:	22 0f       	add	r18, r18
     fc8:	33 1f       	adc	r19, r19
     fca:	24 5f       	subi	r18, 0xF4	; 244
     fcc:	3c 4f       	sbci	r19, 0xFC	; 252
     fce:	f9 01       	movw	r30, r18
     fd0:	e4 0f       	add	r30, r20
     fd2:	f5 1f       	adc	r31, r21
     fd4:	9b e0       	ldi	r25, 0x0B	; 11
     fd6:	90 83       	st	Z, r25
				set_display(x, y, status[x][y], 1);
     fd8:	21 e0       	ldi	r18, 0x01	; 1
     fda:	4b e0       	ldi	r20, 0x0B	; 11
     fdc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_display>
				count++;
     fe0:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <count>
     fe4:	8f 5f       	subi	r24, 0xFF	; 255
     fe6:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <count>
     fea:	18 c0       	rjmp	.+48     	; 0x101c <start_game+0x6f2>
			}
			else if (status[x][y] == 11)
     fec:	9b 30       	cpi	r25, 0x0B	; 11
     fee:	b1 f4       	brne	.+44     	; 0x101c <start_game+0x6f2>
			{
				status[x][y] = 12;
     ff0:	22 0f       	add	r18, r18
     ff2:	33 1f       	adc	r19, r19
     ff4:	22 0f       	add	r18, r18
     ff6:	33 1f       	adc	r19, r19
     ff8:	22 0f       	add	r18, r18
     ffa:	33 1f       	adc	r19, r19
     ffc:	24 5f       	subi	r18, 0xF4	; 244
     ffe:	3c 4f       	sbci	r19, 0xFC	; 252
    1000:	f9 01       	movw	r30, r18
    1002:	e4 0f       	add	r30, r20
    1004:	f5 1f       	adc	r31, r21
    1006:	9c e0       	ldi	r25, 0x0C	; 12
    1008:	90 83       	st	Z, r25
				set_display(x, y, status[x][y], 1);
    100a:	21 e0       	ldi	r18, 0x01	; 1
    100c:	4c e0       	ldi	r20, 0x0C	; 12
    100e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_display>
				count--;
    1012:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <count>
    1016:	81 50       	subi	r24, 0x01	; 1
    1018:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <count>
    101c:	8f e3       	ldi	r24, 0x3F	; 63
    101e:	9c e9       	ldi	r25, 0x9C	; 156
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <start_game+0x6f6>
    1024:	00 c0       	rjmp	.+0      	; 0x1026 <start_game+0x6fc>
    1026:	00 00       	nop
			}
			_delay_ms(20);
		}

		if (count == 64) // win
    1028:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <count>
    102c:	80 34       	cpi	r24, 0x40	; 64
    102e:	09 f0       	breq	.+2      	; 0x1032 <start_game+0x708>
    1030:	7c cc       	rjmp	.-1800   	; 0x92a <start_game>
		{
			glcd_victory();
    1032:	0e 94 ba 03 	call	0x774	; 0x774 <glcd_victory>
    1036:	8f e5       	ldi	r24, 0x5F	; 95
    1038:	9a ee       	ldi	r25, 0xEA	; 234
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <start_game+0x710>
    103e:	00 c0       	rjmp	.+0      	; 0x1040 <start_game+0x716>
    1040:	00 00       	nop
			_delay_ms(30);
			game_initialization();
    1042:	0e 94 19 04 	call	0x832	; 0x832 <game_initialization>
    1046:	71 cc       	rjmp	.-1822   	; 0x92a <start_game>

00001048 <main>:
	}
}
int main(void)
{
	// Port C & D are outputs
	DDRC = DDRD = 0xff;
    1048:	8f ef       	ldi	r24, 0xFF	; 255
    104a:	81 bb       	out	0x11, r24	; 17
    104c:	84 bb       	out	0x14, r24	; 20
	// Port B in input
	DDRB = 0;
    104e:	17 ba       	out	0x17, r1	; 23

	glcd_init();
    1050:	0e 94 de 00 	call	0x1bc	; 0x1bc <glcd_init>
	level = 0;
    1054:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <level>
	game_initialization();
    1058:	0e 94 19 04 	call	0x832	; 0x832 <game_initialization>

	start_game();
    105c:	0e 94 95 04 	call	0x92a	; 0x92a <start_game>

00001060 <__divmodhi4>:
    1060:	97 fb       	bst	r25, 7
    1062:	07 2e       	mov	r0, r23
    1064:	16 f4       	brtc	.+4      	; 0x106a <__divmodhi4+0xa>
    1066:	00 94       	com	r0
    1068:	07 d0       	rcall	.+14     	; 0x1078 <__divmodhi4_neg1>
    106a:	77 fd       	sbrc	r23, 7
    106c:	09 d0       	rcall	.+18     	; 0x1080 <__divmodhi4_neg2>
    106e:	0e 94 4a 08 	call	0x1094	; 0x1094 <__udivmodhi4>
    1072:	07 fc       	sbrc	r0, 7
    1074:	05 d0       	rcall	.+10     	; 0x1080 <__divmodhi4_neg2>
    1076:	3e f4       	brtc	.+14     	; 0x1086 <__divmodhi4_exit>

00001078 <__divmodhi4_neg1>:
    1078:	90 95       	com	r25
    107a:	81 95       	neg	r24
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	08 95       	ret

00001080 <__divmodhi4_neg2>:
    1080:	70 95       	com	r23
    1082:	61 95       	neg	r22
    1084:	7f 4f       	sbci	r23, 0xFF	; 255

00001086 <__divmodhi4_exit>:
    1086:	08 95       	ret

00001088 <__tablejump2__>:
    1088:	ee 0f       	add	r30, r30
    108a:	ff 1f       	adc	r31, r31
    108c:	05 90       	lpm	r0, Z+
    108e:	f4 91       	lpm	r31, Z
    1090:	e0 2d       	mov	r30, r0
    1092:	09 94       	ijmp

00001094 <__udivmodhi4>:
    1094:	aa 1b       	sub	r26, r26
    1096:	bb 1b       	sub	r27, r27
    1098:	51 e1       	ldi	r21, 0x11	; 17
    109a:	07 c0       	rjmp	.+14     	; 0x10aa <__udivmodhi4_ep>

0000109c <__udivmodhi4_loop>:
    109c:	aa 1f       	adc	r26, r26
    109e:	bb 1f       	adc	r27, r27
    10a0:	a6 17       	cp	r26, r22
    10a2:	b7 07       	cpc	r27, r23
    10a4:	10 f0       	brcs	.+4      	; 0x10aa <__udivmodhi4_ep>
    10a6:	a6 1b       	sub	r26, r22
    10a8:	b7 0b       	sbc	r27, r23

000010aa <__udivmodhi4_ep>:
    10aa:	88 1f       	adc	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	5a 95       	dec	r21
    10b0:	a9 f7       	brne	.-22     	; 0x109c <__udivmodhi4_loop>
    10b2:	80 95       	com	r24
    10b4:	90 95       	com	r25
    10b6:	bc 01       	movw	r22, r24
    10b8:	cd 01       	movw	r24, r26
    10ba:	08 95       	ret

000010bc <_exit>:
    10bc:	f8 94       	cli

000010be <__stop_program>:
    10be:	ff cf       	rjmp	.-2      	; 0x10be <__stop_program>
